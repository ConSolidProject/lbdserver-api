{"version":3,"sources":["../../../src/helpers/LbdDataset.ts"],"names":["LbdDataset","constructor","session","url","fetch","accessService","AccessService","dataService","DataService","lbdService","LBDService","checkExistence","status","method","then","result","init","data","headers","i","json","create","options","makePublic","datasetUrl","res","createContainer","aclDefault","ACL","default","Authorization","agentClass","FOAF","Agent","sparqlUpdate","undefined","deleteFile","q","DCAT","Dataset","DCTERMS","creator","info","webId","Object","keys","length","q0","key","delete","deleteContainer","update","query","addDistribution","distribution","mimetype","distributionId","distributionUrl","dist","LbdDistribution","getDistributionUrls","current","dataset","distributions","map","deleteDistribution"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"./functions\"\nimport {v4} from \"uuid\"\nimport { ACL, DCAT, DCTERMS, FOAF, RDFS } from \"@inrupt/vocab-common-rdf\";\nimport LbdDistribution from './LbdDistribution'\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\n\nexport default class LbdDataset {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public projectId: string;\n  public url: string;\n\n  public data: object[];\n  private session: BrowserSession | NodeSession\n\n  constructor(session: BrowserSession | NodeSession, url: string) {\n    this.session = session\n    this.fetch = session.fetch;\n    this.url = url\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.lbdService = new LBDService(session);\n  }\n\n  public async checkExistence() {\n    const status = await this.fetch(this.url, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  public async init() {\n    const data = await this.fetch(this.url, {headers: {\"Accept\": \"application/ld+json\"}}).then(i => i.json())\n    this.data = data\n    return data\n  }\n\n  /**\n   * \n   * @param makePublic \n   * @param id\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\n   * @returns \n   */\n  public async create(\n    options: object = {},\n    makePublic?: boolean,\n  ) {\n    const datasetUrl = this.url\n\n    const status = await this.fetch(datasetUrl, {method: \"HEAD\"}).then(res => res.status)\n    if (status !== 200) {\n      await this.dataService.createContainer(datasetUrl, makePublic)\n\n      //workaround to allow inherited access rights\n\n      if (makePublic) {\n        let aclDefault = `INSERT {?rule <${ACL.default}> <${datasetUrl}>} WHERE {?rule a <${ACL.Authorization}> ; <${ACL.agentClass}> <${FOAF.Agent}>}`\n        await this.dataService.sparqlUpdate(datasetUrl + \".acl\", aclDefault)\n      }\n\n      if (makePublic === undefined) {\n        this.dataService.deleteFile(datasetUrl + \".acl\")\n      }\n    }\n\n    let q = `INSERT DATA {<${datasetUrl}> a <${DCAT.Dataset}> ; <${DCTERMS.creator}> <${this.session.info.webId}>. }`\n\n    await this.dataService.sparqlUpdate(datasetUrl, q)\n    \n    if (Object.keys(options).length > 0) {\n      let q0 = `INSERT DATA { `\n      for (const key of Object.keys(options)) {\n        q0 += `<${datasetUrl}> <${key}> \"${options[key]}\" .`\n      }    \n      q0 += \"}\"\n      await this.dataService.sparqlUpdate(datasetUrl, q0)\n    }\n    await this.init()\n  }\n\n  public async delete() {\n    await this.dataService.deleteContainer(this.url, true)\n    return\n  }\n\n  public async update(query) {\n      await this.dataService.sparqlUpdate(this.url, query)\n  }\n\n  /////////////////////////////////////////////////////////\n  //////////////////// DISTRIBUTIONS///////////////////////\n  /////////////////////////////////////////////////////////\n  public async addDistribution(distribution: File | Buffer, mimetype? ,options: object = {}, distributionId: string = v4(), makePublic: boolean = false) {      \n    const distributionUrl = this.url + distributionId    \n    const dist = new LbdDistribution(this.session, distributionUrl)\n    await dist.create(distribution, {}, mimetype, makePublic)\n    await dist.init()\n    return dist\n  }\n\n  public async getDistributionUrls() {\n      const current = await this.fetch(this.url, {headers: {\"Accept\": \"application/ld+json\"}}).then(res => res.json())\n      const dataset = extract(current, this.url)\n      const distributions = dataset[DCAT.distribution].map(i => i[\"@id\"])\n      return distributions\n  }\n\n  public async deleteDistribution(distributionId: File[]) {\n\n  }\n\n}\n\n"],"file":"LbdDataset.js"}