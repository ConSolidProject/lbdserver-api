{"version":3,"sources":["../../../src/helpers/LbdDataset.ts"],"names":["LbdDataset","constructor","fetch","url","accessService","AccessService","dataService","DataService","lbdService","LBDService","queryEngine","checkExistence","status","method","then","result","init","data","headers","i","json","create","options","makePublic","datasetUrl","createContainer","Object","keys","length","q0","key","sparqlUpdate","delete","deleteContainer","update","query","addDistribution","distribution","mimetype","distributionId","distributionUrl","dist","LbdDistribution","getDistributionUrls","current","res","dataset","distributions","DCAT","map","deleteDistribution"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"jsonld-remote\"\nimport {v4} from \"uuid\"\nimport { DCAT, RDFS } from \"@inrupt/vocab-common-rdf\";\nimport LbdDistribution from './LbdDistribution'\n\nexport default class LbdDataset {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public projectId: string;\n  public url: string;\n\n  public data: object[];\n\n  // include queryEngine to allow caching of querydata etc.\n  public queryEngine: ActorInitSparql;\n\n  constructor(fetch: any, url) {\n\n    this.fetch = fetch;\n    this.url = url\n    this.accessService = new AccessService(fetch);\n    this.dataService = new DataService(fetch);\n    this.lbdService = new LBDService(fetch);\n    this.queryEngine = newEngine();\n  }\n\n  public async checkExistence() {\n    const status = await this.fetch(this.url, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  public async init() {\n    const data = await this.fetch(this.url, {headers: {\"Accept\": \"application/ld+json\"}}).then(i => i.json())\n    this.data = data\n    return data\n  }\n\n  /**\n   * \n   * @param makePublic \n   * @param id\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\n   * @returns \n   */\n  public async create(\n    options: object = {},\n    makePublic: boolean = false,\n  ) {\n    const datasetUrl = this.url\n    await this.dataService.createContainer(datasetUrl, makePublic)  \n    if (Object.keys(options).length > 0) {\n      let q0 = `INSERT DATA { `\n      for (const key of Object.keys(options)) {\n        q0 += `<${datasetUrl}> <${key}> \"${options[key]}\" .`\n      }    \n      q0 += \"}\"\n      await this.dataService.sparqlUpdate(datasetUrl, q0)\n    }\n    await this.init()\n  }\n\n  public async delete() {\n    await this.dataService.deleteContainer(this.url, true)\n    return\n  }\n\n  public async update(query) {\n      await this.dataService.sparqlUpdate(this.url, query)\n  }\n\n  /////////////////////////////////////////////////////////\n  //////////////////// DISTRIBUTIONS///////////////////////\n  /////////////////////////////////////////////////////////\n  public async addDistribution(distribution: File | Buffer, mimetype? ,options: object = {}, distributionId: string = v4(), makePublic: boolean = false) {      \n    const distributionUrl = this.url + distributionId    \n    const dist = new LbdDistribution(this.fetch, distributionUrl)\n    await dist.create(distribution, {}, mimetype, makePublic)\n    await dist.init()\n    return dist\n  }\n\n  public async getDistributionUrls() {\n      const current = await this.fetch(this.url, {headers: {\"Accept\": \"application/ld+json\"}}).then(res => res.json())\n      const dataset = extract(current, this.url)\n      const distributions = dataset[DCAT.distribution].map(i => i[\"@id\"])\n      return distributions\n  }\n\n  public async deleteDistribution(distributionId: File[]) {\n\n  }\n\n}\n\n"],"file":"LbdDataset.js"}