{"version":3,"sources":["../../../src/helpers/LbdDataset.ts"],"names":["LbdDataset","constructor","fetch","url","accessService","AccessService","dataService","DataService","lbdService","LBDService","queryEngine","checkExistence","status","method","then","result","init","data","headers","i","json","create","options","makePublic","datasetUrl","res","createContainer","Object","keys","length","q0","key","sparqlUpdate","delete","deleteContainer","update","query","addDistribution","distribution","mimetype","distributionId","distributionUrl","dist","LbdDistribution","getDistributionUrls","current","dataset","distributions","DCAT","map","deleteDistribution"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"jsonld-remote\"\nimport {v4} from \"uuid\"\nimport { DCAT, RDFS } from \"@inrupt/vocab-common-rdf\";\nimport LbdDistribution from './LbdDistribution'\n\nexport default class LbdDataset {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public projectId: string;\n  public url: string;\n\n  public data: object[];\n\n  // include queryEngine to allow caching of querydata etc.\n  public queryEngine: ActorInitSparql;\n\n  constructor(fetch: any, url) {\n\n    this.fetch = fetch;\n    this.url = url\n    this.accessService = new AccessService(fetch);\n    this.dataService = new DataService(fetch);\n    this.lbdService = new LBDService(fetch);\n    this.queryEngine = newEngine();\n  }\n\n  public async checkExistence() {\n    const status = await this.fetch(this.url, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  public async init() {\n    const data = await this.fetch(this.url, {headers: {\"Accept\": \"application/ld+json\"}}).then(i => i.json())\n    this.data = data\n    return data\n  }\n\n  /**\n   * \n   * @param makePublic \n   * @param id\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\n   * @returns \n   */\n  public async create(\n    options: object = {},\n    makePublic: boolean = false,\n  ) {\n    const datasetUrl = this.url\n\n    const status = await this.fetch(datasetUrl, {method: \"HEAD\"}).then(res => res.status)\n    if (status !== 200) {\n      await this.dataService.createContainer(datasetUrl, makePublic)\n    }\n    \n    if (Object.keys(options).length > 0) {\n      let q0 = `INSERT DATA { `\n      for (const key of Object.keys(options)) {\n        q0 += `<${datasetUrl}> <${key}> \"${options[key]}\" .`\n      }    \n      q0 += \"}\"\n      await this.dataService.sparqlUpdate(datasetUrl, q0)\n    }\n    await this.init()\n  }\n\n  public async delete() {\n    await this.dataService.deleteContainer(this.url, true)\n    return\n  }\n\n  public async update(query) {\n      await this.dataService.sparqlUpdate(this.url, query)\n  }\n\n  /////////////////////////////////////////////////////////\n  //////////////////// DISTRIBUTIONS///////////////////////\n  /////////////////////////////////////////////////////////\n  public async addDistribution(distribution: File | Buffer, mimetype? ,options: object = {}, distributionId: string = v4(), makePublic: boolean = false) {      \n    const distributionUrl = this.url + distributionId    \n    const dist = new LbdDistribution(this.fetch, distributionUrl)\n    await dist.create(distribution, {}, mimetype, makePublic)\n    await dist.init()\n    return dist\n  }\n\n  public async getDistributionUrls() {\n      const current = await this.fetch(this.url, {headers: {\"Accept\": \"application/ld+json\"}}).then(res => res.json())\n      const dataset = extract(current, this.url)\n      const distributions = dataset[DCAT.distribution].map(i => i[\"@id\"])\n      return distributions\n  }\n\n  public async deleteDistribution(distributionId: File[]) {\n\n  }\n\n}\n\n"],"file":"LbdDataset.js"}