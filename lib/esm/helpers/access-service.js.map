{"version":3,"sources":["../../../src/helpers/access-service.ts"],"names":["AccessService","constructor","fetch","verbose","makePublic","resourceURL","accessRights","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","makeFilePublic","FILE","type","userWebID","resourceWithAcl","DATASET","resourceAcl","getResourceAcl","updatedAcl","undefined","newAccess","logAccessInfo","datasetWithAcl","Error","access","resource","agent","console","log","JSON","stringify","controlRead","controlWrite"],"mappings":"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","sourcesContent":["// Import from \"@inrupt/solid-client\"\nimport {\n    getSolidDatasetWithAcl,\n    setPublicResourceAccess,\n    hasResourceAcl,\n    hasAccessibleAcl,\n    getResourceAcl,\n    createAclFromFallbackAcl,\n    hasFallbackAcl,\n    saveAclFor,\n    setAgentResourceAccess,\n    getFileWithAcl\n} from \"@inrupt/solid-client\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\n\nexport default class AccessService{\n\n    public fetch;\n    public verbose: boolean = false;\n\n    constructor(fetch: any, verbose: boolean = false){\n        this.fetch = fetch;\n        this.verbose = verbose;\n    }\n\n    // Make a resource public\n    public async makePublic(resourceURL: string) {\n        // I would by default not grant the public appending rights...\n        const accessRights: AccessRights = { read: true, append: false, write: false, control: false };\n        return this.setResourceAccess(resourceURL, accessRights, ResourceType.CONTAINER);\n    }\n\n    public async makeFilePublic(resourceURL: string) {\n        const accessRights: AccessRights = { read: true, append: true, write: false, control: false };\n        return this.setResourceAccess(resourceURL, accessRights, ResourceType.FILE);\n    }\n\n    public async setResourceAccess(resourceURL: string, accessRights: AccessRights, type: ResourceType, userWebID?: string){\n\n        // Get resource with ACL\n        let resourceWithAcl: any\n        if(type == ResourceType.DATASET || type == ResourceType.CONTAINER){\n            resourceWithAcl = await getSolidDatasetWithAcl(resourceURL, {fetch: this.fetch});\n        }\n\n        if(type == ResourceType.FILE){\n            resourceWithAcl = await getFileWithAcl(resourceURL, {fetch: this.fetch});\n        }\n        \n        // Get resource ACL\n        const resourceAcl = await this.getResourceAcl(resourceWithAcl);\n        \n        // Update ACL access\n        let updatedAcl;\n\n        // If no user webID provided, set the public access\n        if(!userWebID || userWebID == undefined){\n            updatedAcl = setPublicResourceAccess(\n                resourceAcl,\n                accessRights,\n            );\n        }\n        \n        // If user webID provided, set the access for that particular user\n        else{\n            updatedAcl = setAgentResourceAccess(\n                resourceAcl,\n                userWebID,\n                accessRights,\n            );\n        }\n\n        // Save ACL\n        const newAccess = await saveAclFor(resourceWithAcl, updatedAcl, {fetch: this.fetch});\n\n        this.verbose && this.logAccessInfo(accessRights, resourceURL);\n\n        return newAccess;\n\n    }\n\n    // Obtain the SolidDataset's own ACL, if available,\n    // or initialise a new one, if possible:\n    private async getResourceAcl(datasetWithAcl: any){\n\n        let resourceAcl;\n        if (!hasResourceAcl(datasetWithAcl)) {\n        if (!hasAccessibleAcl(datasetWithAcl)) {\n            throw new Error(\n            \"The current user does not have permission to change access rights to this Resource.\"\n            );\n        }\n        if (!hasFallbackAcl(datasetWithAcl)) {\n            throw new Error(\n            \"The current user does not have permission to see who currently has access to this Resource.\"\n            );\n            // Alternatively, initialise a new empty ACL as follows,\n            // but be aware that if you do not give someone Control access,\n            // **nobody will ever be able to change Access permissions in the future**:\n            // resourceAcl = createAcl(myDatasetWithAcl);\n        }\n            resourceAcl = createAclFromFallbackAcl(datasetWithAcl);\n        } else {\n            resourceAcl = getResourceAcl(datasetWithAcl);\n        }\n\n        return resourceAcl;\n    }\n\n    private logAccessInfo(access: any, resource: string, agent: string = \"\"){\n        if (access === null) {\n            console.log(\"Could not load access details for this Resource.\");\n        } else {\n            if(!agent) console.log(`${agent}'s Access:: `, JSON.stringify(access));\n            else console.log(`Public Access:: `, JSON.stringify(access));\n            console.log(\"...\", agent, (access.read ? 'CAN' : 'CANNOT'), \"read the Resource\", resource);\n            console.log(\"...\", agent, (access.append ? 'CAN' : 'CANNOT'), \"add data to the Resource\", resource);\n            console.log(\"...\", agent, (access.write ? 'CAN' : 'CANNOT'), \"change data in the Resource\", resource);\n\n            if ('controlRead' in access){\n                console.log(\"...\", agent, (access.controlRead ? 'CAN' : 'CANNOT'), \"see access to the Resource\", resource);\n                console.log(\"...\", agent, (access.controlWrite ? 'CAN' : 'CANNOT'), \"change access to the Resource\", resource);\n            }else{\n                console.log(\"...\", agent, (access.control ? 'CAN' : 'CANNOT'), \"change access to the Resource\", resource);\n            }\n\n        }\n    }\n\n}"],"file":"access-service.js"}