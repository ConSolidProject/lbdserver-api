{"version":3,"sources":["../../../src/helpers/LbdDistribution.ts"],"names":["LbdDistribution","constructor","fetch","url","datasetUrl","split","pop","ds","join","accessService","AccessService","dataService","DataService","lbdService","LBDService","queryEngine","checkExistence","status","method","then","result","init","options","data","updateMetadata","query","sparqlUpdate","addAccessUrl","accessUrl","q0","DCAT","accessURL","create","file","mimetype","makePublic","mime","lookup","error","writeFileToPod","q","distribution","Distribution","DCTERMS","format","downloadURL","sources","Object","keys","length","key","delete","deleteFile","q1"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"jsonld-remote\"\nimport {v4} from \"uuid\"\nimport { DCAT, DCTERMS, RDFS } from \"@inrupt/vocab-common-rdf\";\nimport mime from \"mime-types\"\n\nexport default class LbdDistribution {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public datasetUrl: string;\n\n  // include queryEngine to allow caching of querydata etc.\n  public queryEngine: ActorInitSparql;\n  public url: string;\n  public data: any;\n\n  constructor(fetch: any, url) {\n    let datasetUrl = url.split('/')\n    datasetUrl.pop()\n    const ds = datasetUrl.join(\"/\") + '/'\n    \n    this.fetch = fetch;\n    this.url = url\n    this.datasetUrl = ds\n    this.accessService = new AccessService(fetch);\n    this.dataService = new DataService(fetch);\n    this.lbdService = new LBDService(fetch);\n    this.queryEngine = newEngine();\n  }\n\n  public async checkExistence() {\n    const status = await this.fetch(this.url, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  public async init(options: object = {}) {\n      this.data = await this.fetch(this.url, options)\n  }\n\n  public async updateMetadata(query) {\n    await this.dataService.sparqlUpdate(this.datasetUrl, query)\n  }\n\n  public async addAccessUrl(accessUrl) {\n    const q0 = `INSERT DATA {<${this.url}> <${DCAT.accessURL}> <${accessUrl}>}`\n    await this.updateMetadata(q0)\n  }\n\n  public async create(\n    file: File | Buffer,\n    options: object = {},\n    mimetype?: string,\n    makePublic: boolean = false,\n  ) {\n      if (!mimetype) {\n          try {\n              mimetype = mime.lookup(file[\"name\"])\n              if (!mimetype) mimetype = \"text/plain\"\n          } catch (error) {\n              mimetype = \"text/plain\"\n          }\n      }\n          \n    await this.dataService.writeFileToPod(file, this.url, makePublic, mimetype)\n\n      const q = `INSERT DATA {\n        <${this.datasetUrl}> <${DCAT.distribution}> <${this.url}> .\n        <${this.url}> a <${DCAT.Distribution}> ;\n            <${DCTERMS.format}> <https://www.iana.org/assignments/media-types/${mimetype}> ;\n            <${DCAT.downloadURL}> <${this.url}> .\n      }`\n      await this.queryEngine.query(q, {sources: [this.datasetUrl], fetch: this.fetch})\n\n    if (Object.keys(options).length > 0) {\n        let q0 = `INSERT DATA { `\n        for (const key of Object.keys(options)) {\n          q0 += `<${this.datasetUrl}> <${key}> \"${options[key]}\" .`\n        }    \n        q0 += \"}\"\n        await this.dataService.sparqlUpdate(this.datasetUrl, q0)\n      }\n  }\n\n  public async delete() {\n    await this.dataService.deleteFile(this.url)\n    // also update dataset\n    const q0 = `DELETE {\n      <${this.url}> ?p ?o .\n    } WHERE {\n      <${this.url}> ?p ?o .\n    }`\n    await this.queryEngine.query(q0, {sources: [this.datasetUrl], fetch: this.fetch})\n\n    const q1 = `DELETE {\n      ?s ?p <${this.url}> .\n    } WHERE {\n      ?s ?p <${this.url}> .\n    }`\n    await this.queryEngine.query(q1, {sources: [this.datasetUrl], fetch: this.fetch})\n\n    return\n  }\n}\n\n"],"file":"LbdDistribution.js"}