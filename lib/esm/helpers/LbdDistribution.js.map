{"version":3,"sources":["../../../src/helpers/LbdDistribution.ts"],"names":["LbdDistribution","constructor","fetch","url","datasetUrl","split","pop","ds","join","accessService","AccessService","dataService","DataService","lbdService","LBDService","queryEngine","checkExistence","status","method","then","result","init","options","data","getContentType","q0","DCTERMS","format","ct","query","sources","res","bindings","length","value","get","contentType","Error","updateMetadata","sparqlUpdate","addAccessUrl","accessUrl","DCAT","accessURL","create","file","mimetype","makePublic","mime","lookup","error","writeFileToPod","q","distribution","Distribution","downloadURL","Object","keys","key","delete","deleteFile","q1"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"jsonld-remote\"\nimport {v4} from \"uuid\"\nimport { DCAT, DCTERMS, RDFS } from \"@inrupt/vocab-common-rdf\";\nimport mime from \"mime-types\"\n\nexport default class LbdDistribution {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public datasetUrl: string;\n  public contentType: string;\n\n  // include queryEngine to allow caching of querydata etc.\n  public queryEngine: ActorInitSparql;\n  public url: string;\n  public data: any;\n\n  constructor(fetch: any, url) {\n    let datasetUrl = url.split('/')\n    datasetUrl.pop()\n    const ds = datasetUrl.join(\"/\") + '/'\n    \n    this.fetch = fetch;\n    this.url = url\n    this.datasetUrl = ds\n  \n    this.accessService = new AccessService(fetch);\n    this.dataService = new DataService(fetch);\n    this.lbdService = new LBDService(fetch);\n    this.queryEngine = newEngine();\n  }\n\n  public async checkExistence() {\n    const status = await this.fetch(this.url, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  public async init(options: object = {}) {\n      this.data = await this.fetch(this.url, options)\n      // this.contentType = await this.getContentType()\n  }\n\n  public async getContentType() {\n    const q0 = `SELECT ?ct where {?id <${DCTERMS.format}> ?ct}`\n    const ct = await this.queryEngine.query(q0, {sources: [this.datasetUrl], fetch: this.fetch}).then((res: any) => res.bindings())\n    if (ct.length > 0) {\n      const value = ct[0].get('?ct').value\n      this.contentType = value\n      return value\n    } else {\n      throw new Error(`\"Could not find contentType in dataset ${this.datasetUrl}`)\n    }\n  } \n\n  public async updateMetadata(query) {\n    await this.dataService.sparqlUpdate(this.datasetUrl, query)\n  }\n\n  public async addAccessUrl(accessUrl) {\n    const q0 = `INSERT DATA {<${this.url}> <${DCAT.accessURL}> <${accessUrl}>}`\n    await this.updateMetadata(q0)\n  }\n\n  public async create(\n    file: File | Buffer,\n    options: object = {},\n    mimetype?: string,\n    makePublic: boolean = false,\n  ) {\n      if (!mimetype) {\n          try {\n              mimetype = mime.lookup(file[\"name\"])\n              if (!mimetype) mimetype = \"text/plain\"\n          } catch (error) {\n              mimetype = \"text/plain\"\n          }\n      }\n          \n    await this.dataService.writeFileToPod(file, this.url, makePublic, mimetype)\n\n      const q = `INSERT DATA {\n        <${this.datasetUrl}> <${DCAT.distribution}> <${this.url}> .\n        <${this.url}> a <${DCAT.Distribution}> ;\n            <${DCTERMS.format}> <https://www.iana.org/assignments/media-types/${mimetype}> ;\n            <${DCAT.downloadURL}> <${this.url}> .\n      }`\n      await this.queryEngine.query(q, {sources: [this.datasetUrl], fetch: this.fetch})\n\n    if (Object.keys(options).length > 0) {\n        let q0 = `INSERT DATA { `\n        for (const key of Object.keys(options)) {\n          q0 += `<${this.datasetUrl}> <${key}> \"${options[key]}\" .`\n        }    \n        q0 += \"}\"\n        await this.dataService.sparqlUpdate(this.datasetUrl, q0)\n      }\n  }\n\n  public async delete() {\n    await this.dataService.deleteFile(this.url)\n    // also update dataset\n    const q0 = `DELETE {\n      <${this.url}> ?p ?o .\n    } WHERE {\n      <${this.url}> ?p ?o .\n    }`\n    await this.queryEngine.query(q0, {sources: [this.datasetUrl], fetch: this.fetch})\n\n    const q1 = `DELETE {\n      ?s ?p <${this.url}> .\n    } WHERE {\n      ?s ?p <${this.url}> .\n    }`\n    await this.queryEngine.query(q1, {sources: [this.datasetUrl], fetch: this.fetch})\n\n    return\n  }\n}\n\n"],"file":"LbdDistribution.js"}