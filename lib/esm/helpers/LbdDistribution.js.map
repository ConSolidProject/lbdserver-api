{"version":3,"sources":["../../../src/helpers/LbdDistribution.ts"],"names":["LbdDistribution","constructor","session","url","dataset","fetch","accessService","AccessService","dataService","DataService","lbdService","LBDService","checkExistence","status","method","then","result","init","options","data","getContentType","myEngine","q0","DCTERMS","format","ct","query","sources","res","bindings","length","value","get","contentType","Error","updateMetadata","sparqlUpdate","addAccessUrl","accessUrl","DCAT","accessURL","create","file","mimetype","makePublic","mime","lookup","error","writeFileToPod","undefined","deleteFile","q","distribution","Distribution","downloadURL","Object","keys","key","delete","q1"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"jsonld-remote\"\nimport {v4} from \"uuid\"\nimport { DCAT, DCTERMS, RDFS } from \"@inrupt/vocab-common-rdf\";\nimport mime from \"mime-types\"\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\nimport LbdDataset from \"./LbdDataset\";\n\nexport default class LbdDistribution {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public contentType: string;\n  public url: string;\n  public data: any;\n\n  private dataset: LbdDataset\n\n  private session:  BrowserSession | NodeSession\n\n  constructor(session: BrowserSession | NodeSession, url: string, dataset) {\n    this.dataset = dataset\n    this.fetch = session.fetch;\n    this.url = url\n  \n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.lbdService = new LBDService(session);\n  }\n\n  public async checkExistence() {\n    const status = await this.fetch(this.url, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  public async init(options: object = {}) {\n      this.data = await this.fetch(this.url, options)\n      // this.contentType = await this.getContentType()\n  }\n\n  public async getContentType() {\n    const myEngine = newEngine()\n    const q0 = `SELECT ?ct where {?id <${DCTERMS.format}> ?ct}`\n    const ct = await myEngine.query(q0, {sources: [this.dataset.url], fetch: this.fetch}).then((res: any) => res.bindings())\n    if (ct.length > 0) {\n      const value = ct[0].get('?ct').value\n      this.contentType = value\n      return value\n    } else {\n      throw new Error(`\"Could not find contentType in dataset ${this.dataset.url}`)\n    }\n  } \n\n  public async updateMetadata(query) {\n    await this.dataService.sparqlUpdate(this.dataset.url, query)\n  }\n\n  public async addAccessUrl(accessUrl) {\n    const q0 = `INSERT DATA {<${this.url}> <${DCAT.accessURL}> <${accessUrl}>}`\n    await this.updateMetadata(q0)\n  }\n\n  public async create(\n    file: File | Buffer,\n    options: object = {},\n    mimetype?: string,\n    makePublic?: boolean,\n  ) {\n      if (!mimetype) {\n          try {\n              mimetype = mime.lookup(file[\"name\"])\n              if (!mimetype) mimetype = \"text/plain\"\n          } catch (error) {\n              mimetype = \"text/plain\"\n          }\n      }\n          \n    await this.dataService.writeFileToPod(file, this.url, makePublic, mimetype)\n      //workaround to allow inherited access rights\n      if (makePublic === undefined) {\n        this.dataService.deleteFile(this.url + \".acl\")\n      }\n\n      const q = `INSERT DATA {\n        <${this.dataset.url}> <${DCAT.distribution}> <${this.url}> .\n        <${this.url}> a <${DCAT.Distribution}> ;\n            <${DCTERMS.format}> <https://www.iana.org/assignments/media-types/${mimetype}> ;\n            <${DCAT.downloadURL}> <${this.url}> .\n      }`\n      await this.dataService.sparqlUpdate(this.dataset.url, q)\n    if (Object.keys(options).length > 0) {\n        let q0 = `INSERT DATA { `\n        for (const key of Object.keys(options)) {\n          q0 += `<${this.dataset.url}> <${key}> \"${options[key]}\" .`\n        }    \n        q0 += \"}\"\n        await this.dataService.sparqlUpdate(this.dataset.url, q0)\n      }\n  }\n\n  public async delete() {\n    const myEngine = newEngine()\n    await this.dataService.deleteFile(this.url)\n    // also update dataset\n    const q0 = `DELETE {\n      <${this.url}> ?p ?o .\n    } WHERE {\n      <${this.url}> ?p ?o .\n    }`\n    await myEngine.query(q0, {sources: [this.dataset.url], fetch: this.fetch})\n\n    const q1 = `DELETE {\n      ?s ?p <${this.url}> .\n    } WHERE {\n      ?s ?p <${this.url}> .\n    }`\n    await myEngine.query(q1, {sources: [this.dataset.url], fetch: this.fetch})\n\n    return\n  }\n}\n\n"],"file":"LbdDistribution.js"}