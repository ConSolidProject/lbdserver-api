{"version":3,"sources":["../../../src/helpers/LbdProject.ts"],"names":["LbdProject","verbose","constructor","fetch","accessPoint","endsWith","localProject","projectId","split","length","accessService","AccessService","dataService","DataService","lbdService","LBDService","queryEngine","checkExistence","status","method","then","result","init","data","headers","i","json","create","makePublic","existingPartialProjects","local","push","createContainer","createRegistryContainer","LBD","hasDatasetRegistry","hasReferenceRegistry","hasServiceRegistry","part","addPartialProject","q0","aggregates","sparqlUpdate","addStakeholder","webId","accessRights","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","delete","deleteContainer","findAllPartialProjects","projects","query","sources","bindings","map","r","get","value","findPartialProject","repo","getProjectRegistry","partialProjectOfStakeholder","res","Error","addPartialProjectByStakeholder","partialProjectUrl","containerName","property","containerUrl","addDataset","options","id","subject","datasetRegistry","datasetUrl","theDataset","LbdDataset","deleteDataset","ds","deleteDatasetById","datasetId","addConcept","referenceRegistry","ref","LbdConcept","deleteConcept","url","parts","pop","join","console","log","addAlias","getConcept","queryProject"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport LbdConcept from './LbdConcept'\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\nimport LbdDataset from \"./LbdDataset\"\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"jsonld-remote\"\nimport {v4} from \"uuid\"\n\nexport default class LbdProject {\n  public fetch;\n  public verbose: boolean = false;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public projectId: string;\n  public accessPoint: string;\n  public data: object[];\n\n  // include queryEngine to allow caching of querydata etc.\n  public queryEngine: ActorInitSparql;\n  public localProject: string;\n\n  constructor(fetch: any, accessPoint: string, verbose: boolean = false) {\n    if (!accessPoint.endsWith(\"/\")) accessPoint += \"/\"\n\n    this.fetch = fetch;\n    this.accessPoint = accessPoint;\n    this.localProject = accessPoint + \"local/\"\n    this.verbose = verbose;\n    this.projectId = accessPoint.split('/')[accessPoint.split(\"/\").length  - 2];\n    this.accessService = new AccessService(fetch);\n    this.dataService = new DataService(fetch);\n    this.lbdService = new LBDService(fetch);\n    this.queryEngine = newEngine();\n  }\n\n  public async checkExistence() {\n    const status = await this.fetch(this.accessPoint, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  public async init() {\n    const data = await this.fetch(this.localProject, {headers: {\"Accept\": \"application/ld+json\"}}).then(i => i.json())\n    this.data = data\n    return data\n  }\n\n  // initialise a project\n  public async create(\n    makePublic: boolean = false,\n    existingPartialProjects: string[] = []\n  ) {\n    const local = this.accessPoint + 'local/'\n    existingPartialProjects.push(local)\n\n    // create global access point\n    await this.dataService.createContainer(this.accessPoint, makePublic)\n    await this.dataService.createContainer(local, makePublic)\n\n    // create different registries\n    await this.createRegistryContainer(\"datasets/\", makePublic, LBD.hasDatasetRegistry)\n    await this.createRegistryContainer(\"references/\", makePublic, LBD.hasReferenceRegistry)\n    await this.createRegistryContainer(\"services/\", makePublic, LBD.hasServiceRegistry)\n\n    for (const part of existingPartialProjects) {\n        await this.addPartialProject(part)\n    }\n\n    await this.init()\n  }\n\n  public async addPartialProject(part: string) {\n    const q0 = `INSERT DATA {\n        <${this.accessPoint}> <${LBD.aggregates}> <${part}> .\n        }`\n    await this.dataService.sparqlUpdate(this.accessPoint, q0)\n  }\n\n  public async addStakeholder(webId: string, accessRights: AccessRights = {read: true, append: false, write: false, control: false}) {\n    await this.accessService.setResourceAccess(this.accessPoint, accessRights, ResourceType.CONTAINER, webId)\n  }\n\n  public async delete() {\n      await this.dataService.deleteContainer(this.accessPoint, true)\n  }\n\n  public async findAllPartialProjects() {\n    const projects = await this.queryEngine.query(`SELECT ?proj WHERE {<${this.accessPoint}> <${LBD.aggregates}> ?proj}`, {sources: [this.accessPoint], fetch: this.fetch}).then((i: any) => i.bindings()).then(i => i.map(r => r.get('?proj').value))\n    return projects\n  }\n\n  public async findPartialProject(webId: string) {\n    const repo = await this.lbdService.getProjectRegistry(webId)\n    const partialProjectOfStakeholder = repo + this.projectId + '/local/'\n    const status = await this.fetch(partialProjectOfStakeholder, {method: \"HEAD\"}).then(res => res.status)\n    if (status === 200) {\n        return partialProjectOfStakeholder\n    } else {\n        throw new Error(`UNAUTHORIZED: This repository does not exist or you don't have the required access rights`)\n    }\n  }\n\n  public async addPartialProjectByStakeholder(webId: string) {\n    const partialProjectUrl = await this.findPartialProject(webId)\n    await this.addPartialProject(partialProjectUrl)\n    return partialProjectUrl\n  }\n\n  private async createRegistryContainer(containerName, makePublic, property) {\n    if (!containerName.endsWith('/')) containerName += \"/\"\n\n    const containerUrl = this.localProject + containerName\n    await this.dataService.createContainer(containerUrl, makePublic)\n    const q0 = `INSERT DATA {\n        <${this.localProject}> <${property}> <${containerUrl}> .\n      }`;\n    await this.dataService.sparqlUpdate(this.localProject, q0)\n  }\n\n  /////////////////////////////////////////////////////////\n  /////////////////////// DATASETS ////////////////////////\n  /////////////////////////////////////////////////////////\n\n  /**\n   * \n   * @param makePublic \n   * @param id\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\n   * @returns \n   */\n  public async addDataset(\n    options: object = {},\n    makePublic: boolean = false,\n    id: string = v4()\n  ): Promise<LbdDataset> {\n    const subject = extract(this.data, this.localProject)\n    const datasetRegistry = subject[LBD.hasDatasetRegistry][0][\"@id\"]\n    const datasetUrl = datasetRegistry + id + \"/\"\n    const theDataset = new LbdDataset(this.fetch, datasetUrl)\n    await theDataset.create(options, makePublic)\n    return theDataset\n  }\n\n  public async deleteDataset(\n    datasetUrl: string\n  ) {\n    if (!datasetUrl.endsWith('/')) datasetUrl += \"/\"\n    const ds = new LbdDataset(this.fetch, datasetUrl)\n    await ds.delete()\n  }\n\n  public async deleteDatasetById(\n    datasetId: string\n  ) {\n    const subject = extract(this.data, this.localProject)\n    const datasetRegistry = subject[LBD.hasDatasetRegistry][0][\"@id\"]\n    const datasetUrl = datasetRegistry + datasetId + \"/\"\n    const ds = new LbdDataset(this.fetch, datasetUrl)\n    await ds.delete()\n  }\n\n  /////////////////////////////////////////////////////////\n  ////////////////////// REFERENCES////////////////////////\n  /////////////////////////////////////////////////////////\n\n  // get all references related to a specific abstract Concept\n  public async addConcept(): Promise<LbdConcept> {\n    const subject = extract(this.data, this.localProject)\n    const referenceRegistry = subject[LBD.hasReferenceRegistry][0][\"@id\"]\n    const ref = new LbdConcept(this.fetch, referenceRegistry)\n    await ref.create()\n    return ref\n  }\n\n  public async deleteConcept(url: string) {\n    const parts = url.split(\"/\")\n    const id = parts.pop()\n    const referenceRegistry = parts.join(\"/\")\n    console.log('id, referenceRegistry', id, referenceRegistry);\n    const ref = new LbdConcept(this.fetch, referenceRegistry, id)\n    await ref.delete()\n  }\n\n\n  // register an alias for an existing concept\n  public async addAlias() {}\n\n  // get the abstract Concept related to a dataset/distribution + id\n  public async getConcept() {}\n\n  /////////////////////////////////////////////////////////\n  /////////////////////// QUERY ////////////////////////\n  /////////////////////////////////////////////////////////\n  public async queryProject() {\n    // if there is a satellite\n\n    // if there is no satellite\n  }\n\n\n  \n\n}\n\n"],"file":"LbdProject.js"}