{"version":3,"sources":["../../../src/helpers/LbdProject.ts"],"names":["LbdProject","verbose","constructor","session","accessPoint","endsWith","fetch","localProject","projectId","split","length","accessService","AccessService","dataService","DataService","lbdService","LBDService","checkExistence","status","method","then","result","init","data","headers","i","json","create","existingPartialProjects","options","makePublic","local","push","createContainer","aclDefault","ACL","default","Authorization","agentClass","FOAF","Agent","sparqlUpdate","createRegistryContainer","LBD","hasDatasetRegistry","referenceContainerUrl","hasReferenceRegistry","hasServiceRegistry","part","addPartialProject","q","DCTERMS","creator","info","webId","Object","keys","q0","key","referenceMeta","LbdDataset","addDistribution","Buffer","from","aggregates","addStakeholder","accessRights","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","delete","deleteContainer","findAllPartialProjects","myEngine","projects","query","sources","bindings","map","r","get","value","findPartialProject","repo","getProjectRegistry","partialProjectOfStakeholder","res","Error","addPartialProjectByStakeholder","partialProjectUrl","containerName","property","containerUrl","addDataset","id","subject","datasetRegistry","datasetUrl","theDataset","deleteDataset","ds","deleteDatasetById","datasetId","getAllPartialProjects","results","resultToString","asJson","partials","item","console","log","getSingleQueryResult","source","getAllDatasetUrls","p","dsReg","LDP","contains","asStream","parsed","addConcept","referenceRegistry","ref","LbdConcept","deleteConcept","url","parts","pop","join","addAlias","getConcept","queryProject"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport LbdConcept from './LbdConcept'\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\nimport LbdDataset from \"./LbdDataset\"\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"./functions\"\nimport {v4} from \"uuid\"\nimport { ACL, DCTERMS, FOAF } from \"@inrupt/vocab-common-rdf\";\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\nimport { LDP } from \"@inrupt/vocab-common-rdf\";\nimport { parseStream } from \"./utils\";\n\nexport default class LbdProject {\n  public fetch;\n  public verbose: boolean = false;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public projectId: string;\n  public accessPoint: string;\n  public data: object[];\n  \n  private session: BrowserSession | NodeSession;\n\n  // include queryEngine to allow caching of querydata etc.\n  public queryEngine: ActorInitSparql;\n  public localProject: string;\n\n  constructor(session: BrowserSession | NodeSession, accessPoint: string, verbose: boolean = false) {\n    if (!accessPoint.endsWith(\"/\")) accessPoint += \"/\"\n    this.session = session\n    this.fetch = session.fetch;\n    this.accessPoint = accessPoint;\n    this.localProject = accessPoint + \"local/\"\n    this.verbose = verbose;\n    this.projectId = accessPoint.split('/')[accessPoint.split(\"/\").length  - 2];\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.lbdService = new LBDService(session);\n  }\n\n  public async checkExistence() {\n    const status = await this.fetch(this.accessPoint, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  public async init() {\n    const data = await this.fetch(this.localProject, {headers: {\"Accept\": \"application/ld+json\"}}).then(i => i.json())\n    this.data = data\n    return data\n  }\n\n  // initialise a project\n  public async create(\n    existingPartialProjects: string[] = [],\n    options: object = {},\n    makePublic: boolean = false,\n  ) {\n    const local = this.accessPoint + 'local/'\n    existingPartialProjects.push(local)\n\n    // create global access point\n    await this.dataService.createContainer(this.accessPoint, makePublic)\n    await this.dataService.createContainer(local, makePublic)\n    if (makePublic) {\n      let aclDefault = `INSERT {?rule <${ACL.default}> <${local}>} WHERE {?rule a <${ACL.Authorization}> ; <${ACL.agentClass}> <${FOAF.Agent}>}`\n      await this.dataService.sparqlUpdate(local + '.acl', aclDefault)\n    }\n\n    // create different registries\n    await this.createRegistryContainer(\"datasets/\", makePublic, LBD.hasDatasetRegistry)\n    const referenceContainerUrl = await this.createRegistryContainer(\"references/\", makePublic, LBD.hasReferenceRegistry)\n    await this.createRegistryContainer(\"services/\", makePublic, LBD.hasServiceRegistry)\n\n    for (const part of existingPartialProjects) {\n        await this.addPartialProject(part)\n    }\n\n    let q = `INSERT DATA {<${this.accessPoint}> <${DCTERMS.creator}> \"${this.session.info.webId}\" . }`\n    await this.dataService.sparqlUpdate(local, q)\n    await this.dataService.sparqlUpdate(this.accessPoint, q)\n\n    // create optional metadata (e.g. label etc.)\n    if (Object.keys(options).length > 0) {\n      let q0 = `INSERT DATA { `\n      for (const key of Object.keys(options)) {\n        q0 += `<${this.accessPoint}> <${key}> \"${options[key]}\" .`\n      }    \n      q0 += \"}\"\n      await this.dataService.sparqlUpdate(this.accessPoint, q0)\n    }\n\n\n\n    const referenceMeta = new LbdDataset(this.session, referenceContainerUrl)\n    await referenceMeta.create()\n    await referenceMeta.addDistribution(Buffer.from(\"\"), \"text/turtle\", {}, \"data\", makePublic)\n    await this.init()\n  }\n\n  public async addPartialProject(part: string) {\n    const q0 = `INSERT DATA {\n        <${this.accessPoint}> <${LBD.aggregates}> <${part}> .\n        }`\n    await this.dataService.sparqlUpdate(this.accessPoint, q0)\n  }\n\n  public async addStakeholder(webId: string, accessRights: AccessRights = {read: true, append: false, write: false, control: false}) {\n    await this.accessService.setResourceAccess(this.accessPoint, accessRights, ResourceType.CONTAINER, webId)\n  }\n\n  public async delete() {\n      await this.dataService.deleteContainer(this.accessPoint, true)\n  }\n\n  public async findAllPartialProjects() {\n    const myEngine = newEngine()\n    const projects = await myEngine.query(`SELECT ?proj WHERE {<${this.accessPoint}> <${LBD.aggregates}> ?proj}`, {sources: [this.accessPoint], fetch: this.fetch}).then((i: any) => i.bindings()).then(i => i.map(r => r.get('?proj').value))\n    return projects\n  }\n\n  public async findPartialProject(webId: string) {\n    const repo = await this.lbdService.getProjectRegistry(webId)\n    const partialProjectOfStakeholder = repo + this.projectId + '/local/'\n    const status = await this.fetch(partialProjectOfStakeholder, {method: \"HEAD\"}).then(res => res.status)\n    if (status === 200) {\n        return partialProjectOfStakeholder\n    } else {\n        throw new Error(`UNAUTHORIZED: This repository does not exist or you don't have the required access rights`)\n    }\n  }\n\n  public async addPartialProjectByStakeholder(webId: string) {\n    const partialProjectUrl = await this.findPartialProject(webId)\n    await this.addPartialProject(partialProjectUrl)\n    return partialProjectUrl\n  }\n\n  private async createRegistryContainer(containerName, makePublic, property) {\n    if (!containerName.endsWith('/')) containerName += \"/\"\n\n    const containerUrl = this.localProject + containerName\n    await this.dataService.createContainer(containerUrl, makePublic)\n    const q0 = `INSERT DATA {\n        <${this.localProject}> <${property}> <${containerUrl}> .\n      }`;\n    await this.dataService.sparqlUpdate(this.localProject, q0)\n    return containerUrl\n  }\n\n  /////////////////////////////////////////////////////////\n  /////////////////////// DATASETS ////////////////////////\n  /////////////////////////////////////////////////////////\n\n  /**\n   * \n   * @param makePublic \n   * @param id\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\n   * @returns \n   */\n  public async addDataset(\n    options: object = {},\n    makePublic: boolean = false,\n    id: string = v4()\n  ): Promise<LbdDataset> {\n    const subject = extract(this.data, this.localProject)\n    const datasetRegistry = subject[LBD.hasDatasetRegistry][0][\"@id\"]\n    const datasetUrl = datasetRegistry + id + \"/\"\n    const theDataset = new LbdDataset(this.session, datasetUrl)\n    await theDataset.create(options, makePublic)\n    return theDataset\n  }\n\n  public async deleteDataset(\n    datasetUrl: string\n  ) {\n    if (!datasetUrl.endsWith('/')) datasetUrl += \"/\"\n    const ds = new LbdDataset(this.session, datasetUrl)\n    await ds.delete()\n  }\n\n  public async deleteDatasetById(\n    datasetId: string\n  ) {\n    const subject = extract(this.data, this.localProject)\n    const datasetRegistry = subject[LBD.hasDatasetRegistry][0][\"@id\"]\n    const datasetUrl = datasetRegistry + datasetId + \"/\"\n    const ds = new LbdDataset(this.session, datasetUrl)\n    await ds.delete()\n  }\n\n  private async getAllPartialProjects() {\n    const myEngine = newEngine()\n    const q = `SELECT ?partial WHERE {<${this.accessPoint}> <${LBD.aggregates}> ?partial}`\n    const results = await myEngine.query(q, {sources: [this.accessPoint], fetch: this.fetch})\n    const { data } = await myEngine.resultToString(results,'application/sparql-results+json');\n    const asJson = await parseStream(data)\n    const partials = asJson[\"results\"].bindings.map(item => item[\"partial\"].value)\n    console.log('partials', partials)\n    return partials\n  }\n\n  private async getSingleQueryResult(source, property) {\n    const myEngine = newEngine()\n    const q = `SELECT ?res WHERE {<${source}> <${property}> ?res}`\n    const bindings = await myEngine.query(q, {sources: [source], fetch: this.fetch}).then((i: IQueryResultBindings) => i.bindings())\n    return bindings[0].get(\"?res\").value\n  }\n\n  public async getAllDatasetUrls(options?: {query: string, asStream: boolean, local: boolean}) {\n    const myEngine = newEngine()\n    const subject = extract(this.data, this.localProject)\n    const sources = []\n    if (options && options.local) {\n      sources.push(subject[LBD.hasDatasetRegistry][0][\"@id\"])\n    } else {\n      const partials = await this.getAllPartialProjects()\n      for (const p of partials) {\n        const dsReg = await this.getSingleQueryResult(p, LBD.hasDatasetRegistry)\n        sources.push(dsReg)\n      }\n    }\n    let q\n    if (!options || !options.query) {\n      q = `SELECT ?dataset WHERE {?registry <${LDP.contains}> ?dataset}`\n    } else {\n      q = options.query\n    }\n\n    const results = await myEngine.query(q, {sources, fetch: this.fetch})\n    const { data } = await myEngine.resultToString(results,'application/sparql-results+json');\n    if (options && options.asStream) {\n      return data\n    } else {\n      const parsed = await parseStream(data);\n      return parsed[\"results\"].bindings.map(i => i[\"dataset\"].value)\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  ////////////////////// REFERENCES////////////////////////\n  /////////////////////////////////////////////////////////\n\n  // get all references related to a specific abstract Concept\n  public async addConcept(): Promise<LbdConcept> {\n    const subject = extract(this.data, this.localProject)\n    const referenceRegistry = subject[LBD.hasReferenceRegistry][0][\"@id\"]\n    const ref = new LbdConcept(this.session, referenceRegistry)\n    await ref.create()\n    return ref\n  }\n\n  public async deleteConcept(url: string) {\n    const parts = url.split(\"/\")\n    const id = parts.pop()\n    const referenceRegistry = parts.join(\"/\")\n    console.log('id, referenceRegistry', id, referenceRegistry);\n    const ref = new LbdConcept(this.session, referenceRegistry, id)\n    await ref.delete()\n  }\n\n\n  // register an alias for an existing concept\n  public async addAlias() {}\n\n  // get the abstract Concept related to a dataset/distribution + id\n  public async getConcept() {}\n\n  /////////////////////////////////////////////////////////\n  /////////////////////// QUERY ////////////////////////\n  /////////////////////////////////////////////////////////\n  public async queryProject() {\n    // if there is a satellite\n\n    // if there is no satellite\n  }\n\n\n  \n\n}\n\n"],"file":"LbdProject.js"}