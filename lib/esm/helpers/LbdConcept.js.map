{"version":3,"sources":["../../../src/helpers/LbdConcept.ts"],"names":["LbdConcept","constructor","fetch","registry","id","url","accessService","AccessService","dataService","DataService","queryEngine","create","q0","LBD","Concept","sparqlUpdate","delete","addReference","identifier","dataset","distribution","referenceId","referenceUrl","identifierId","identifierUrl","formatted","identifierType","getIdentifierType","hasReference","inDataset","hasIdentifier","q1","inDistribution","deleteReference","console","log","addAlias","isInt","n","startsWith","URIBasedIdentifier","XSD","integer","StringBasedIdentifier","float","string"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"jsonld-remote\"\nimport {v4} from \"uuid\"\nimport { DCAT, DCTERMS, RDFS, XSD } from \"@inrupt/vocab-common-rdf\";\nimport mime from \"mime-types\"\n\nexport default class LbdConcept {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public datasetUrl: string;\n  public registry: string;\n  public id: string;\n  public concept: string;\n\n  // include queryEngine to allow caching of querydata etc.\n  public queryEngine: ActorInitSparql;\n  public url: string;\n\n  constructor(fetch: any, registry, id: string = v4()) {\n    this.registry = registry;\n    this.id = id;\n    this.url = this.registry + this.id\n    this.fetch = fetch;\n    this.accessService = new AccessService(fetch);\n    this.dataService = new DataService(fetch);\n    this.queryEngine = newEngine();\n  }\n\n  public async create() {\n    const q0 = `INSERT DATA {<${this.url}> a <${LBD.Concept}> }`\n    await this.dataService.sparqlUpdate(this.registry, q0)\n  }\n\n  public async delete() {\n    const q0 = `DELETE {\n      <${this.url}> ?p ?o .\n    } WHERE {\n      <${this.url}> ?p ?o .\n    }`\n    await this.dataService.sparqlUpdate(this.registry, q0)\n  }\n\n  public async addReference(identifier: string, dataset: string, distribution?: string) {\n    const referenceId = v4()\n    const referenceUrl = this.registry + referenceId\n    const identifierId = v4()\n    const identifierUrl = this.registry + identifierId\n\n    const {formatted, identifierType} = this.getIdentifierType(identifier)\n\n    const q0 = `INSERT DATA {\n      <${this.url}> <${LBD.hasReference}> <${referenceUrl}> .\n      <${referenceUrl}> <${LBD.inDataset}> <${dataset}> ;\n        <${LBD.hasIdentifier}> <${identifierUrl}> .\n      <${identifierUrl}> a <${identifierType}> ;\n        <${LBD.identifier}> ${formatted} .\n   }`\n    \n    if (distribution) {\n      const q1 = `INSERT DATA {\n        <${identifierUrl}> <${LBD.inDistribution}> <${distribution}> ;\n      }`\n    }\n\n    await this.dataService.sparqlUpdate(this.registry, q0)\n    await this.dataService.sparqlUpdate(this.registry, q0)\n\n    return referenceUrl\n  }\n\n  public async deleteReference(referenceUrl) {\n    const q0 = `DELETE {\n      ?a ?b <${referenceUrl}> .\n      <${referenceUrl}> ?p ?o ; ?q ?x.\n      ?x ?y ?z.\n    } WHERE {\n      ?a ?b <${referenceUrl}> .\n      <${referenceUrl}> ?p ?o ; ?q ?x.\n      ?x ?y ?z.\n    }`\n    console.log('q0', q0);\n    await this.dataService.sparqlUpdate(this.registry, q0)\n\n    const q1 = `DELETE {<${this.url}> <${LBD.hasReference}> <${referenceUrl}> .}`\n    await this.dataService.sparqlUpdate(this.registry, q1)\n  }\n\n  public async addAlias() {\n\n  }\n\n  private getIdentifierType(identifier: string | number) {\n    function isInt(n) {\n      return n % 1 === 0;\n   }\n\n    if (typeof identifier === \"string\" && identifier.startsWith(\"http\")) {\n      return {formatted: `<${identifier}>`, identifierType: LBD.URIBasedIdentifier}\n    } else {\n      if (typeof identifier === \"number\") {\n        if (isInt(identifier)) {\n          return {formatted: `\"${identifier}\"^^<${XSD.integer}>`, identifierType: LBD.StringBasedIdentifier}\n        } else {\n          return {formatted: `\"${identifier}\"^^<${XSD.float}>`, identifierType: LBD.StringBasedIdentifier}\n        }\n      } else {\n        return {formatted: `\"${identifier}\"^^<${XSD.string}>`, identifierType: LBD.StringBasedIdentifier}\n      }\n    }\n  }\n\n}\n\n"],"file":"LbdConcept.js"}