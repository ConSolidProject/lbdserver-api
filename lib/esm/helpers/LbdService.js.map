{"version":3,"sources":["../../../src/helpers/LbdService.ts"],"names":["LBDService","constructor","fetch","verbose","accessService","AccessService","dataService","DataService","validateWebId","webId","lbdLoc","getProjectRegistry","length","stakeholder","myEngine","q","LBD","hasProjectRegistry","location","query","sources","then","res","bindings","bind","map","i","get","value","catch","err","undefined","createProjectRegistry","url","publiclyAccessible","q0","sparqlUpdate","q1","Aggregator","accessRights","actor","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","error","console","log","removeProjectRegistry","deleteContainer"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport { urlJoin } from \"url-join-ts\";\nimport DataService from \"./data-service\";\nimport { computeChecksumMd5 } from \"./utils\";\nimport { newEngine, IQueryResultBindings } from \"@comunica/actor-init-sparql\";\n// Import from \"@inrupt/solid-client\"\nimport {\n  createSolidDataset,\n  buildThing,\n  getSolidDataset,\n  createThing,\n  setThing,\n  setUrl,\n  addUrl,\n  getThingAll,\n  getUrlAll,\n  setDatetime,\n  saveSolidDatasetAt,\n} from \"@inrupt/solid-client\";\n\nimport { RDF, SCHEMA_INRUPT, DCAT } from \"@inrupt/vocab-common-rdf\";\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\n\nexport default class LBDService {\n  public fetch;\n  public verbose: boolean = false;\n  public accessService: AccessService;\n  public dataService: DataService;\n\n  constructor(fetch: any, verbose: boolean = false) {\n    this.fetch = fetch;\n    this.verbose = verbose;\n    this.accessService = new AccessService(fetch);\n    this.dataService = new DataService(fetch);\n  }\n\n  /////////////////////////////////////////////////////////\n  ////////////////////// PREPARATION //////////////////////\n  /////////////////////////////////////////////////////////\n  public async validateWebId(webId: string) {\n    const lbdLoc = await this.getProjectRegistry(webId)\n    if (lbdLoc && lbdLoc.length > 0) {\n        return true\n    }\n    return false\n  }\n\n  public async getProjectRegistry(stakeholder: string): Promise<string|undefined> {\n      const myEngine = newEngine();\n      const q = `select ?loc where {<${stakeholder}> <${LBD.hasProjectRegistry}> ?loc}`;\n      const location = await myEngine\n        .query(q, { sources: [stakeholder], fetch: this.fetch })\n        .then((res: IQueryResultBindings) => res.bindings())\n        .then((bind: any) => bind.map(i => i.get(\"?loc\").value))\n        .catch((err: Error) => {throw err});\n    if (location && location.length > 0) {\n        return location[0];\n    } else {\n        return undefined\n    }\n  }\n\n  public async createProjectRegistry(stakeholder: string, url: string, publiclyAccessible: boolean = true): Promise<string> {\n    try {\n      const q0 = `INSERT DATA {\n          <${stakeholder}> <${LBD.hasProjectRegistry}> <${url}> .\n        }`;\n      await this.dataService.sparqlUpdate(stakeholder, q0);\n\n      // create the LBD registry (container / Aggregator)\n      const q1 = `INSERT DATA {\n        <${url}> a <${LBD.Aggregator}> .\n      }`;\n    \n      // the updates immediately creates the container\n      await this.dataService.sparqlUpdate(url, q1);\n\n      let accessRights: AccessRights\n      let actor: string | undefined\n      if (publiclyAccessible) {\n        accessRights = { read: true, append: false, write: false, control: false }\n      } else {\n        accessRights = { read: true, append: true, write: true, control: true }\n        actor = stakeholder\n      }\n      await this.accessService.setResourceAccess(url, accessRights, ResourceType.CONTAINER, actor)\n      return url;\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n\n  public async removeProjectRegistry(stakeholder: string, url: string) {\n    try {\n      const q0 = `DELETE {<${stakeholder}> <${LBD.hasProjectRegistry}> <${url}> .}\n      WHERE {<${stakeholder}> <${LBD.hasProjectRegistry}> ?reg .}\n      `;\n      await this.dataService.sparqlUpdate(stakeholder, q0);\n      await this.dataService.deleteContainer(url, true)\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n}\n"],"file":"LbdService.js"}