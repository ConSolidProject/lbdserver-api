{"version":3,"sources":["../../../src/helpers/LbdService.ts"],"names":["LBDService","verbose","constructor","fetch","accessService","AccessService","dataService","DataService","validateWebId","webId","lbdLoc","getProjectRegistry","length","stakeholder","myEngine","q","LBD","hasProjectRegistry","location","query","sources","then","res","bindings","bind","map","i","get","value","catch","err","undefined","createProjectRegistry","url","publiclyAccessible","q0","sparqlUpdate","q1","Aggregator","accessRights","actor","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","error","console","log","removeProjectRegistry","deleteContainer"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport { urlJoin } from \"url-join-ts\";\nimport DataService from \"./data-service\";\nimport { computeChecksumMd5 } from \"./utils\";\nimport { newEngine, IQueryResultBindings } from \"@comunica/actor-init-sparql\";\n// Import from \"@inrupt/solid-client\"\nimport {\n  createSolidDataset,\n  buildThing,\n  getSolidDataset,\n  createThing,\n  setThing,\n  setUrl,\n  addUrl,\n  getThingAll,\n  getUrlAll,\n  setDatetime,\n  saveSolidDatasetAt,\n} from \"@inrupt/solid-client\";\n\nimport { RDF, SCHEMA_INRUPT, DCAT } from \"@inrupt/vocab-common-rdf\";\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\n\nexport default class LBDService {\n  public fetch;\n  public verbose: boolean = false;\n  public accessService: AccessService;\n  public dataService: DataService;\n\n  constructor(fetch: any, verbose: boolean = false) {\n    this.fetch = fetch;\n    this.verbose = verbose;\n    this.accessService = new AccessService(fetch);\n    this.dataService = new DataService(fetch);\n  }\n\n  /////////////////////////////////////////////////////////\n  ////////////////////// PREPARATION //////////////////////\n  /////////////////////////////////////////////////////////\n  public async validateWebId(webId: string) {\n    const lbdLoc = await this.getProjectRegistry(webId)\n    if (lbdLoc && lbdLoc.length > 0) {\n        return true\n    }\n    return false\n  }\n\n  public async getProjectRegistry(stakeholder: string): Promise<string|undefined> {\n      const myEngine = newEngine();\n      const q = `select ?loc where {<${stakeholder}> <${LBD.hasProjectRegistry}> ?loc}`;\n      const location = await myEngine\n        .query(q, { sources: [stakeholder], fetch: this.fetch })\n        .then((res: IQueryResultBindings) => res.bindings())\n        .then((bind: any) => bind.map(i => i.get(\"?loc\").value))\n        .catch((err: Error) => {throw err});\n    if (location && location.length > 0) {\n        return location[0];\n    } else {\n        return undefined\n    }\n  }\n\n  public async createProjectRegistry(stakeholder: string, url: string, publiclyAccessible: boolean = true): Promise<string> {\n    try {\n      const q0 = `INSERT DATA {\n          <${stakeholder}> <${LBD.hasProjectRegistry}> <${url}> .\n        }`;\n      await this.dataService.sparqlUpdate(stakeholder, q0);\n\n      // create the LBD registry (container / Aggregator)\n      const q1 = `INSERT DATA {\n        <${url}> a <${LBD.Aggregator}> .\n      }`;\n    \n      // the updates immediately creates the container\n      await this.dataService.sparqlUpdate(url, q1);\n\n      let accessRights: AccessRights\n      let actor: string | undefined\n      if (publiclyAccessible) {\n        accessRights = { read: true, append: false, write: false, control: false }\n      } else {\n        accessRights = { read: true, append: true, write: true, control: true }\n        actor = stakeholder\n      }\n      await this.accessService.setResourceAccess(url, accessRights, ResourceType.CONTAINER, actor)\n      return url;\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n\n  public async removeProjectRegistry(stakeholder: string, url: string) {\n    try {\n      const q0 = `DELETE {<${stakeholder}> <${LBD.hasProjectRegistry}> <${url}> .}\n      WHERE {<${stakeholder}> <${LBD.hasProjectRegistry}> ?reg .}\n      `;\n      await this.dataService.sparqlUpdate(stakeholder, q0);\n      await this.dataService.deleteContainer(url, true)\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n}\n"],"file":"LbdService.js"}