{"version":3,"sources":["../../../src/helpers/LbdConcept.ts"],"names":["LbdConcept","fetch","registry","id","url","accessService","AccessService","dataService","DataService","queryEngine","q0","LBD","Concept","sparqlUpdate","identifier","dataset","distribution","referenceId","referenceUrl","identifierId","identifierUrl","getIdentifierType","formatted","identifierType","hasReference","inDataset","hasIdentifier","q1","inDistribution","console","log","isInt","n","startsWith","URIBasedIdentifier","XSD","integer","StringBasedIdentifier","string"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"jsonld-remote\"\nimport {v4} from \"uuid\"\nimport { DCAT, DCTERMS, RDFS, XSD } from \"@inrupt/vocab-common-rdf\";\nimport mime from \"mime-types\"\n\nexport default class LbdConcept {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public datasetUrl: string;\n  public registry: string;\n  public id: string;\n  public concept: string;\n\n  // include queryEngine to allow caching of querydata etc.\n  public queryEngine: ActorInitSparql;\n  public url: string;\n\n  constructor(fetch: any, registry, id: string = v4()) {\n    this.registry = registry;\n    this.id = id;\n    this.url = this.registry + this.id\n    this.fetch = fetch;\n    this.accessService = new AccessService(fetch);\n    this.dataService = new DataService(fetch);\n    this.queryEngine = newEngine();\n  }\n\n  public async create() {\n    const q0 = `INSERT DATA {<${this.url}> a <${LBD.Concept}> }`\n    await this.dataService.sparqlUpdate(this.registry, q0)\n  }\n\n  public async delete() {\n    const q0 = `DELETE {\n      <${this.url}> ?p ?o .\n    } WHERE {\n      <${this.url}> ?p ?o .\n    }`\n    await this.dataService.sparqlUpdate(this.registry, q0)\n  }\n\n  public async addReference(identifier: string, dataset: string, distribution?: string) {\n    const referenceId = v4()\n    const referenceUrl = this.registry + referenceId\n    const identifierId = v4()\n    const identifierUrl = this.registry + identifierId\n\n    const {formatted, identifierType} = this.getIdentifierType(identifier)\n\n    const q0 = `INSERT DATA {\n      <${this.url}> <${LBD.hasReference}> <${referenceUrl}> .\n      <${referenceUrl}> <${LBD.inDataset}> <${dataset}> ;\n        <${LBD.hasIdentifier}> <${identifierUrl}> .\n      <${identifierUrl}> a <${identifierType}> ;\n        <${LBD.identifier}> ${formatted} .\n   }`\n    \n    if (distribution) {\n      const q1 = `INSERT DATA {\n        <${identifierUrl}> <${LBD.inDistribution}> <${distribution}> ;\n      }`\n    }\n\n    await this.dataService.sparqlUpdate(this.registry, q0)\n    await this.dataService.sparqlUpdate(this.registry, q0)\n\n    return referenceUrl\n  }\n\n  public async deleteReference(referenceUrl) {\n    const q0 = `DELETE {\n      ?a ?b <${referenceUrl}> .\n      <${referenceUrl}> ?p ?o ; ?q ?x.\n      ?x ?y ?z.\n    } WHERE {\n      ?a ?b <${referenceUrl}> .\n      <${referenceUrl}> ?p ?o ; ?q ?x.\n      ?x ?y ?z.\n    }`\n    console.log('q0', q0);\n    await this.dataService.sparqlUpdate(this.registry, q0)\n\n    const q1 = `DELETE {<${this.url}> <${LBD.hasReference}> <${referenceUrl}> .}`\n    await this.dataService.sparqlUpdate(this.registry, q1)\n  }\n\n  public async addAlias() {\n\n  }\n\n  private getIdentifierType(identifier: string | number) {\n    function isInt(n) {\n      return n % 1 === 0;\n   }\n\n    if (typeof identifier === \"string\" && identifier.startsWith(\"http\")) {\n      return {formatted: `<${identifier}>`, identifierType: LBD.URIBasedIdentifier}\n    } else {\n      if (typeof identifier === \"number\") {\n        if (isInt(identifier)) {\n          return {formatted: `\"${identifier}\"^^<${XSD.integer}>`, identifierType: LBD.StringBasedIdentifier}\n        } else {\n          return {formatted: `\"${identifier}\"^^<${XSD.float}>`, identifierType: LBD.StringBasedIdentifier}\n        }\n      } else {\n        return {formatted: `\"${identifier}\"^^<${XSD.string}>`, identifierType: LBD.StringBasedIdentifier}\n      }\n    }\n  }\n\n}\n\n"],"file":"LbdConcept.js"}