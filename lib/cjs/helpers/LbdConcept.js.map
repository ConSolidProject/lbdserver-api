{"version":3,"sources":["../../../src/helpers/LbdConcept.ts"],"names":["LbdConcept","session","registry","id","distribution","url","fetch","accessService","AccessService","dataService","DataService","queryEngine","q0","LBD","Concept","sparqlUpdate","identifier","dataset","referenceId","referenceUrl","identifierId","identifierUrl","getIdentifierType","formatted","identifierType","hasReference","inDataset","hasIdentifier","q1","inDistribution","console","log","isInt","n","startsWith","URIBasedIdentifier","XSD","integer","StringBasedIdentifier","string"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"./functions\"\nimport {v4} from \"uuid\"\nimport { DCAT, DCTERMS, RDFS, XSD } from \"@inrupt/vocab-common-rdf\";\nimport mime from \"mime-types\"\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\n\nexport default class LbdConcept {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public datasetUrl: string;\n  public registry: string;\n  public id: string;\n  public concept: string;\n  public distribution: string; \n\n  private session: BrowserSession | NodeSession\n  // include queryEngine to allow caching of querydata etc.\n  public queryEngine: ActorInitSparql;\n  public url: string;\n\n  constructor(session: BrowserSession | NodeSession, registry, id: string = v4()) {\n    this.registry = registry;\n    this.distribution = registry + \"data\"\n    this.id = id;\n    this.url = this.distribution + \"#\" + this.id\n    this.session = session\n    this.fetch = session.fetch;\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.queryEngine = newEngine();\n  }\n\n  public async create() {\n    const q0 = `INSERT DATA {<${this.url}> a <${LBD.Concept}> }`\n    await this.dataService.sparqlUpdate(this.distribution, q0)\n  }\n\n  public async delete() {\n    const q0 = `DELETE {\n      <${this.url}> ?p ?o .\n    } WHERE {\n      <${this.url}> ?p ?o .\n    }`\n    await this.dataService.sparqlUpdate(this.distribution, q0)\n  }\n\n  public async addReference(identifier: string, dataset: string, distribution?: string) {\n    const referenceId = v4()\n    const referenceUrl = this.distribution + \"#\" + referenceId\n    const identifierId = v4()\n    const identifierUrl = this.distribution + \"#\" + identifierId\n\n    const {formatted, identifierType} = this.getIdentifierType(identifier)\n\n    const q0 = `INSERT DATA {\n      <${this.url}> <${LBD.hasReference}> <${referenceUrl}> .\n      <${referenceUrl}> <${LBD.inDataset}> <${dataset}> ;\n        <${LBD.hasIdentifier}> <${identifierUrl}> .\n      <${identifierUrl}> a <${identifierType}> ;\n        <${LBD.identifier}> ${formatted} .\n   }`\n    \n    if (distribution) {\n      const q1 = `INSERT DATA {\n        <${identifierUrl}> <${LBD.inDistribution}> <${distribution}> ;\n      }`\n    }\n\n    await this.dataService.sparqlUpdate(this.distribution, q0)\n    await this.dataService.sparqlUpdate(this.distribution, q0)\n\n    return referenceUrl\n  }\n\n  public async deleteReference(referenceUrl) {\n    const q0 = `DELETE {\n      ?a ?b <${referenceUrl}> .\n      <${referenceUrl}> ?p ?o ; ?q ?x.\n      ?x ?y ?z.\n    } WHERE {\n      ?a ?b <${referenceUrl}> .\n      <${referenceUrl}> ?p ?o ; ?q ?x.\n      ?x ?y ?z.\n    }`\n    console.log('q0', q0);\n    await this.dataService.sparqlUpdate(this.distribution, q0)\n\n    const q1 = `DELETE {<${this.url}> <${LBD.hasReference}> <${referenceUrl}> .}`\n    await this.dataService.sparqlUpdate(this.distribution, q1)\n  }\n\n  public async addAlias() {\n\n  }\n\n  private getIdentifierType(identifier: string | number) {\n    function isInt(n) {\n      return n % 1 === 0;\n   }\n\n    if (typeof identifier === \"string\" && identifier.startsWith(\"http\")) {\n      return {formatted: `<${identifier}>`, identifierType: LBD.URIBasedIdentifier}\n    } else {\n      if (typeof identifier === \"number\") {\n        if (isInt(identifier)) {\n          return {formatted: `\"${identifier}\"^^<${XSD.integer}>`, identifierType: LBD.StringBasedIdentifier}\n        } else {\n          return {formatted: `\"${identifier}\"^^<${XSD.float}>`, identifierType: LBD.StringBasedIdentifier}\n        }\n      } else {\n        return {formatted: `\"${identifier}\"^^<${XSD.string}>`, identifierType: LBD.StringBasedIdentifier}\n      }\n    }\n  }\n\n}\n\n"],"file":"LbdConcept.js"}