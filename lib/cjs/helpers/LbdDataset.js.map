{"version":3,"sources":["../../../src/helpers/LbdDataset.ts"],"names":["LbdDataset","session","url","fetch","accessService","AccessService","dataService","DataService","lbdService","LBDService","queryEngine","method","then","result","status","headers","i","json","data","options","makePublic","datasetUrl","res","createContainer","q","DCAT","Dataset","sparqlUpdate","Object","keys","length","q0","key","init","deleteContainer","query","distribution","mimetype","distributionId","distributionUrl","dist","LbdDistribution","create","current","dataset","distributions","map"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"./functions\"\nimport {v4} from \"uuid\"\nimport { DCAT, RDFS } from \"@inrupt/vocab-common-rdf\";\nimport LbdDistribution from './LbdDistribution'\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\n\nexport default class LbdDataset {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public projectId: string;\n  public url: string;\n\n  public data: object[];\n  private session: BrowserSession | NodeSession\n\n  // include queryEngine to allow caching of querydata etc.\n  public queryEngine: ActorInitSparql;\n\n  constructor(session: BrowserSession | NodeSession, url: string) {\n    this.session = session\n    this.fetch = session.fetch;\n    this.url = url\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.lbdService = new LBDService(session);\n    this.queryEngine = newEngine();\n  }\n\n  public async checkExistence() {\n    const status = await this.fetch(this.url, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  public async init() {\n    const data = await this.fetch(this.url, {headers: {\"Accept\": \"application/ld+json\"}}).then(i => i.json())\n    this.data = data\n    return data\n  }\n\n  /**\n   * \n   * @param makePublic \n   * @param id\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\n   * @returns \n   */\n  public async create(\n    options: object = {},\n    makePublic: boolean = false,\n  ) {\n    const datasetUrl = this.url\n\n    const status = await this.fetch(datasetUrl, {method: \"HEAD\"}).then(res => res.status)\n    if (status !== 200) {\n      await this.dataService.createContainer(datasetUrl, makePublic)\n    }\n\n    let q = `INSERT DATA {<${datasetUrl}> a <${DCAT.Dataset}> . }`\n\n    await this.dataService.sparqlUpdate(datasetUrl, q)\n    \n    if (Object.keys(options).length > 0) {\n      let q0 = `INSERT DATA { `\n      for (const key of Object.keys(options)) {\n        q0 += `<${datasetUrl}> <${key}> \"${options[key]}\" .`\n      }    \n      q0 += \"}\"\n      await this.dataService.sparqlUpdate(datasetUrl, q0)\n    }\n    await this.init()\n  }\n\n  public async delete() {\n    await this.dataService.deleteContainer(this.url, true)\n    return\n  }\n\n  public async update(query) {\n      await this.dataService.sparqlUpdate(this.url, query)\n  }\n\n  /////////////////////////////////////////////////////////\n  //////////////////// DISTRIBUTIONS///////////////////////\n  /////////////////////////////////////////////////////////\n  public async addDistribution(distribution: File | Buffer, mimetype? ,options: object = {}, distributionId: string = v4(), makePublic: boolean = false) {      \n    const distributionUrl = this.url + distributionId    \n    const dist = new LbdDistribution(this.session, distributionUrl)\n    await dist.create(distribution, {}, mimetype, makePublic)\n    await dist.init()\n    return dist\n  }\n\n  public async getDistributionUrls() {\n      const current = await this.fetch(this.url, {headers: {\"Accept\": \"application/ld+json\"}}).then(res => res.json())\n      const dataset = extract(current, this.url)\n      const distributions = dataset[DCAT.distribution].map(i => i[\"@id\"])\n      return distributions\n  }\n\n  public async deleteDistribution(distributionId: File[]) {\n\n  }\n\n}\n\n"],"file":"LbdDataset.js"}