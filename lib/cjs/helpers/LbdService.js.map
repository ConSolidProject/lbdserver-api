{"version":3,"sources":["../../../src/helpers/LbdService.ts"],"names":["LBDService","fetch","verbose","accessService","AccessService","dataService","DataService","webId","getProjectRegistry","lbdLoc","length","stakeholder","myEngine","q","LBD","hasProjectRegistry","query","sources","then","res","bindings","bind","map","i","get","value","err","location","undefined","url","publiclyAccessible","q0","sparqlUpdate","q1","Aggregator","accessRights","read","append","write","control","actor","setResourceAccess","ResourceType","CONTAINER","console","log","deleteContainer"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AAiBA;;AACA;;;;;;;;;;;;;;;;IAEqBA,U;AAMnB,sBAAYC,KAAZ,EAAkD;AAAA,QAA1BC,OAA0B,uEAAP,KAAO;;AAAA;;AAAA,qCAJxB,KAIwB;;AAChD,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,aAAL,GAAqB,IAAIC,yBAAJ,CAAkBH,KAAlB,CAArB;AACA,SAAKI,WAAL,GAAmB,IAAIC,uBAAJ,CAAgBL,KAAhB,CAAnB;AACD,G,CAED;AACA;AACA;;;;;;mFACA,iBAA2BM,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACuB,KAAKC,kBAAL,CAAwBD,KAAxB,CADvB;;AAAA;AACQE,gBAAAA,MADR;;AAAA,sBAEMA,MAAM,IAAIA,MAAM,CAACC,MAAP,GAAgB,CAFhC;AAAA;AAAA;AAAA;;AAAA,iDAGa,IAHb;;AAAA;AAAA,iDAKS,KALT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;wFAQA,kBAAgCC,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,gBAAAA,QADV,GACqB,iCADrB;AAEUC,gBAAAA,CAFV,iCAEqCF,WAFrC,gBAEsDG,gBAAIC,kBAF1D;AAAA;AAAA,uBAG2BH,QAAQ,CAC5BI,KADoB,CACdH,CADc,EACX;AAAEI,kBAAAA,OAAO,EAAE,CAACN,WAAD,CAAX;AAA0BV,kBAAAA,KAAK,EAAE,KAAKA;AAAtC,iBADW,EAEpBiB,IAFoB,CAEf,UAACC,GAAD;AAAA,yBAA+BA,GAAG,CAACC,QAAJ,EAA/B;AAAA,iBAFe,EAGpBF,IAHoB,CAGf,UAACG,IAAD;AAAA,yBAAeA,IAAI,CAACC,GAAL,CAAS,UAAAC,CAAC;AAAA,2BAAIA,CAAC,CAACC,GAAF,CAAM,MAAN,EAAcC,KAAlB;AAAA,mBAAV,CAAf;AAAA,iBAHe,WAId,UAACC,GAAD,EAAgB;AAAC,wBAAMA,GAAN;AAAU,iBAJb,CAH3B;;AAAA;AAGUC,gBAAAA,QAHV;;AAAA,sBAQMA,QAAQ,IAAIA,QAAQ,CAACjB,MAAT,GAAkB,CARpC;AAAA;AAAA;AAAA;;AAAA,kDASaiB,QAAQ,CAAC,CAAD,CATrB;;AAAA;AAAA,kDAWaC,SAXb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;2FAeA,kBAAmCjB,WAAnC,EAAwDkB,GAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqEC,gBAAAA,kBAArE,8DAAmG,IAAnG;AAAA;AAEUC,gBAAAA,EAFV,uCAGWpB,WAHX,gBAG4BG,gBAAIC,kBAHhC,gBAGwDc,GAHxD;AAAA;AAAA,uBAKU,KAAKxB,WAAL,CAAiB2B,YAAjB,CAA8BrB,WAA9B,EAA2CoB,EAA3C,CALV;;AAAA;AAOI;AACME,gBAAAA,EARV,qCASSJ,GATT,kBASoBf,gBAAIoB,UATxB,mBAYI;;AAZJ;AAAA,uBAaU,KAAK7B,WAAL,CAAiB2B,YAAjB,CAA8BH,GAA9B,EAAmCI,EAAnC,CAbV;;AAAA;AAiBI,oBAAIH,kBAAJ,EAAwB;AACtBK,kBAAAA,YAAY,GAAG;AAAEC,oBAAAA,IAAI,EAAE,IAAR;AAAcC,oBAAAA,MAAM,EAAE,KAAtB;AAA6BC,oBAAAA,KAAK,EAAE,KAApC;AAA2CC,oBAAAA,OAAO,EAAE;AAApD,mBAAf;AACD,iBAFD,MAEO;AACLJ,kBAAAA,YAAY,GAAG;AAAEC,oBAAAA,IAAI,EAAE,IAAR;AAAcC,oBAAAA,MAAM,EAAE,IAAtB;AAA4BC,oBAAAA,KAAK,EAAE,IAAnC;AAAyCC,oBAAAA,OAAO,EAAE;AAAlD,mBAAf;AACAC,kBAAAA,KAAK,GAAG7B,WAAR;AACD;;AAtBL;AAAA,uBAuBU,KAAKR,aAAL,CAAmBsC,iBAAnB,CAAqCZ,GAArC,EAA0CM,YAA1C,EAAwDO,8BAAaC,SAArE,EAAgFH,KAAhF,CAvBV;;AAAA;AAAA,kDAwBWX,GAxBX;;AAAA;AAAA;AAAA;AA0BIe,gBAAAA,OAAO,CAACC,GAAR;AA1BJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;2FA+BA,kBAAmClC,WAAnC,EAAwDkB,GAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUE,gBAAAA,EAFV,sBAE2BpB,WAF3B,gBAE4CG,gBAAIC,kBAFhD,gBAEwEc,GAFxE,iCAGclB,WAHd,gBAG+BG,gBAAIC,kBAHnC;AAAA;AAAA,uBAKU,KAAKV,WAAL,CAAiB2B,YAAjB,CAA8BrB,WAA9B,EAA2CoB,EAA3C,CALV;;AAAA;AAAA;AAAA,uBAMU,KAAK1B,WAAL,CAAiByC,eAAjB,CAAiCjB,GAAjC,EAAsC,IAAtC,CANV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIe,gBAAAA,OAAO,CAACC,GAAR;AARJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O","sourcesContent":["import AccessService from \"./access-service\";\nimport { urlJoin } from \"url-join-ts\";\nimport DataService from \"./data-service\";\nimport { computeChecksumMd5 } from \"./utils\";\nimport { newEngine, IQueryResultBindings } from \"@comunica/actor-init-sparql\";\n// Import from \"@inrupt/solid-client\"\nimport {\n  createSolidDataset,\n  buildThing,\n  getSolidDataset,\n  createThing,\n  setThing,\n  setUrl,\n  addUrl,\n  getThingAll,\n  getUrlAll,\n  setDatetime,\n  saveSolidDatasetAt,\n} from \"@inrupt/solid-client\";\n\nimport { RDF, SCHEMA_INRUPT, DCAT } from \"@inrupt/vocab-common-rdf\";\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\n\nexport default class LBDService {\n  public fetch;\n  public verbose: boolean = false;\n  public accessService: AccessService;\n  public dataService: DataService;\n\n  constructor(fetch: any, verbose: boolean = false) {\n    this.fetch = fetch;\n    this.verbose = verbose;\n    this.accessService = new AccessService(fetch);\n    this.dataService = new DataService(fetch);\n  }\n\n  /////////////////////////////////////////////////////////\n  ////////////////////// PREPARATION //////////////////////\n  /////////////////////////////////////////////////////////\n  public async validateWebId(webId: string) {\n    const lbdLoc = await this.getProjectRegistry(webId)\n    if (lbdLoc && lbdLoc.length > 0) {\n        return true\n    }\n    return false\n  }\n\n  public async getProjectRegistry(stakeholder: string): Promise<string|undefined> {\n      const myEngine = newEngine();\n      const q = `select ?loc where {<${stakeholder}> <${LBD.hasProjectRegistry}> ?loc}`;\n      const location = await myEngine\n        .query(q, { sources: [stakeholder], fetch: this.fetch })\n        .then((res: IQueryResultBindings) => res.bindings())\n        .then((bind: any) => bind.map(i => i.get(\"?loc\").value))\n        .catch((err: Error) => {throw err});\n    if (location && location.length > 0) {\n        return location[0];\n    } else {\n        return undefined\n    }\n  }\n\n  public async createProjectRegistry(stakeholder: string, url: string, publiclyAccessible: boolean = true): Promise<string> {\n    try {\n      const q0 = `INSERT DATA {\n          <${stakeholder}> <${LBD.hasProjectRegistry}> <${url}> .\n        }`;\n      await this.dataService.sparqlUpdate(stakeholder, q0);\n\n      // create the LBD registry (container / Aggregator)\n      const q1 = `INSERT DATA {\n        <${url}> a <${LBD.Aggregator}> .\n      }`;\n    \n      // the updates immediately creates the container\n      await this.dataService.sparqlUpdate(url, q1);\n\n      let accessRights: AccessRights\n      let actor: string | undefined\n      if (publiclyAccessible) {\n        accessRights = { read: true, append: false, write: false, control: false }\n      } else {\n        accessRights = { read: true, append: true, write: true, control: true }\n        actor = stakeholder\n      }\n      await this.accessService.setResourceAccess(url, accessRights, ResourceType.CONTAINER, actor)\n      return url;\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n\n  public async removeProjectRegistry(stakeholder: string, url: string) {\n    try {\n      const q0 = `DELETE {<${stakeholder}> <${LBD.hasProjectRegistry}> <${url}> .}\n      WHERE {<${stakeholder}> <${LBD.hasProjectRegistry}> ?reg .}\n      `;\n      await this.dataService.sparqlUpdate(stakeholder, q0);\n      await this.dataService.deleteContainer(url, true)\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n}\n"],"file":"LbdService.js"}