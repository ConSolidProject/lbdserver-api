{"version":3,"sources":["../../../src/helpers/LbdService.ts"],"names":["LBDService","session","verbose","fetch","accessService","AccessService","dataService","DataService","webId","getProjectRegistry","lbdLoc","length","aggregator","headers","then","t","json","data","myProjects","LDP","contains","map","i","stakeholder","myEngine","q","LBD","hasProjectRegistry","query","sources","res","bindings","bind","get","value","err","location","undefined","url","publiclyAccessible","q0","sparqlUpdate","q1","Aggregator","accessRights","read","append","write","control","actor","setResourceAccess","ResourceType","CONTAINER","console","log","deleteContainer"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport { urlJoin } from \"url-join-ts\";\nimport DataService from \"./data-service\";\nimport { computeChecksumMd5 } from \"./utils\";\nimport { newEngine, IQueryResultBindings } from \"@comunica/actor-init-sparql\";\n// Import from \"@inrupt/solid-client\"\nimport {\n  createSolidDataset,\n  buildThing,\n  getSolidDataset,\n  createThing,\n  setThing,\n  setUrl,\n  addUrl,\n  getThingAll,\n  getUrlAll,\n  setDatetime,\n  saveSolidDatasetAt,\n} from \"@inrupt/solid-client\";\nimport { extract } from \"./functions\";\nimport { RDF, SCHEMA_INRUPT, DCAT, LDP } from \"@inrupt/vocab-common-rdf\";\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\n\nexport default class LBDService {\n  public fetch;\n  public verbose: boolean = false;\n  public accessService: AccessService;\n  public dataService: DataService;\n  private session: BrowserSession | NodeSession\n  \n  constructor(session: BrowserSession | NodeSession, verbose: boolean = false) {\n    this.session = session\n    this.fetch = session.fetch;\n    this.verbose = verbose;\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n  }\n\n  /////////////////////////////////////////////////////////\n  ////////////////////// PREPARATION //////////////////////\n  /////////////////////////////////////////////////////////\n  public async validateWebId(webId: string) {\n    const lbdLoc = await this.getProjectRegistry(webId)\n    if (lbdLoc && lbdLoc.length > 0) {\n        return true\n    }\n    return false\n  }\n\n  public async getAllProjects(aggregator) {\n    const data = await this.fetch(aggregator, { headers: { \"Accept\": \"application/ld+json\" } }).then(t => t.json())\n    const myProjects = extract(data, aggregator)[LDP.contains].map(i => i[\"@id\"])\n    return myProjects\n  }\n\n  public async getProjectRegistry(stakeholder: string): Promise<string|undefined> {\n      const myEngine = newEngine();\n      const q = `select ?loc where {<${stakeholder}> <${LBD.hasProjectRegistry}> ?loc}`;\n      const location = await myEngine\n        .query(q, { sources: [stakeholder], fetch: this.fetch })\n        .then((res: IQueryResultBindings) => res.bindings())\n        .then((bind: any) => bind.map(i => i.get(\"?loc\").value))\n        .catch((err: Error) => {throw err});\n    if (location && location.length > 0) {\n        return location[0];\n    } else {\n        return undefined\n    }\n  }\n\n  public async createProjectRegistry(stakeholder: string, url: string, publiclyAccessible: boolean = true): Promise<string> {\n    try {\n      const q0 = `INSERT DATA {\n          <${stakeholder}> <${LBD.hasProjectRegistry}> <${url}> .\n        }`;\n      await this.dataService.sparqlUpdate(stakeholder, q0);\n\n      // create the LBD registry (container / Aggregator)\n      const q1 = `INSERT DATA {\n        <${url}> a <${LBD.Aggregator}> .\n      }`;\n    \n      // the updates immediately creates the container\n      await this.dataService.sparqlUpdate(url, q1);\n\n      let accessRights: AccessRights\n      let actor: string | undefined\n      if (publiclyAccessible) {\n        accessRights = { read: true, append: false, write: false, control: false }\n      } else {\n        accessRights = { read: true, append: true, write: true, control: true }\n        actor = stakeholder\n      }\n      await this.accessService.setResourceAccess(url, accessRights, ResourceType.CONTAINER, actor)\n      return url;\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n\n  public async removeProjectRegistry(stakeholder: string, url: string) {\n    try {\n      const q0 = `DELETE {<${stakeholder}> <${LBD.hasProjectRegistry}> <${url}> .}\n      WHERE {<${stakeholder}> <${LBD.hasProjectRegistry}> ?reg .}\n      `;\n      await this.dataService.sparqlUpdate(stakeholder, q0);\n      await this.dataService.deleteContainer(url, true)\n    } catch (error) {\n      console.log(`error`, error);\n      throw error;\n    }\n  }\n}\n"],"file":"LbdService.js"}