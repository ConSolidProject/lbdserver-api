{"version":3,"sources":["../../../src/helpers/LbdDistribution.ts"],"names":["LbdDistribution","session","url","datasetUrl","split","pop","ds","join","fetch","accessService","AccessService","dataService","DataService","lbdService","LBDService","method","then","result","status","options","data","myEngine","q0","DCTERMS","format","query","sources","res","bindings","ct","length","value","get","contentType","Error","sparqlUpdate","accessUrl","DCAT","accessURL","updateMetadata","file","mimetype","makePublic","mime","lookup","error","writeFileToPod","undefined","deleteFile","q","distribution","Distribution","downloadURL","Object","keys","key","q1"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAIA;;AAGA;;AACA;;;;;;;;;;;;;;IAIqBA,e;AAanB,2BAAYC,OAAZ,EAAmDC,GAAnD,EAAgE;AAAA;;AAC9D,QAAIC,UAAU,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAjB;AACAD,IAAAA,UAAU,CAACE,GAAX;AACA,QAAMC,EAAE,GAAGH,UAAU,CAACI,IAAX,CAAgB,GAAhB,IAAuB,GAAlC;AAEA,SAAKC,KAAL,GAAaP,OAAO,CAACO,KAArB;AACA,SAAKN,GAAL,GAAWA,GAAX;AACA,SAAKC,UAAL,GAAkBG,EAAlB;AAEA,SAAKG,aAAL,GAAqB,IAAIC,yBAAJ,CAAkBT,OAAO,CAACO,KAA1B,CAArB;AACA,SAAKG,WAAL,GAAmB,IAAIC,uBAAJ,CAAgBX,OAAO,CAACO,KAAxB,CAAnB;AACA,SAAKK,UAAL,GAAkB,IAAIC,sBAAJ,CAAeb,OAAf,CAAlB;AACD;;;;;oFAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACuB,KAAKO,KAAL,CAAW,KAAKN,GAAhB,EAAqB;AAACa,kBAAAA,MAAM,EAAE;AAAT,iBAArB,EAAuCC,IAAvC,CAA4C,UAAAC,MAAM;AAAA,yBAAIA,MAAM,CAACC,MAAX;AAAA,iBAAlD,CADvB;;AAAA;AACQA,gBAAAA,MADR;;AAAA,sBAEMA,MAAM,KAAK,GAFjB;AAAA;AAAA;AAAA;;AAAA,iDAGW,IAHX;;AAAA;AAAA,iDAKW,KALX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;0EASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBC,gBAAAA,OAAlB,8DAAoC,EAApC;AAAA;AAAA,uBACsB,KAAKX,KAAL,CAAW,KAAKN,GAAhB,EAAqBiB,OAArB,CADtB;;AAAA;AACI,qBAAKC,IADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;oFAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,gBAAAA,QADR,GACmB,iCADnB;AAEQC,gBAAAA,EAFR,oCAEuCC,wBAAQC,MAF/C;AAAA;AAAA,uBAGmBH,QAAQ,CAACI,KAAT,CAAeH,EAAf,EAAmB;AAACI,kBAAAA,OAAO,EAAE,CAAC,KAAKvB,UAAN,CAAV;AAA6BK,kBAAAA,KAAK,EAAE,KAAKA;AAAzC,iBAAnB,EAAoEQ,IAApE,CAAyE,UAACW,GAAD;AAAA,yBAAcA,GAAG,CAACC,QAAJ,EAAd;AAAA,iBAAzE,CAHnB;;AAAA;AAGQC,gBAAAA,EAHR;;AAAA,sBAIMA,EAAE,CAACC,MAAH,GAAY,CAJlB;AAAA;AAAA;AAAA;;AAKUC,gBAAAA,KALV,GAKkBF,EAAE,CAAC,CAAD,CAAF,CAAMG,GAAN,CAAU,KAAV,EAAiBD,KALnC;AAMI,qBAAKE,WAAL,GAAmBF,KAAnB;AANJ,kDAOWA,KAPX;;AAAA;AAAA,sBASU,IAAIG,KAAJ,mDAAoD,KAAK/B,UAAzD,EATV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;oFAaA,kBAA4BsB,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACQ,KAAKd,WAAL,CAAiBwB,YAAjB,CAA8B,KAAKhC,UAAnC,EAA+CsB,KAA/C,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;kFAIA,kBAA0BW,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQd,gBAAAA,EADR,2BAC8B,KAAKpB,GADnC,gBAC4CmC,qBAAKC,SADjD,gBACgEF,SADhE;AAAA;AAAA,uBAEQ,KAAKG,cAAL,CAAoBjB,EAApB,CAFR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;4EAKA,kBACEkB,IADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEErB,gBAAAA,OAFF,8DAEoB,EAFpB;AAGEsB,gBAAAA,QAHF;AAIEC,gBAAAA,UAJF;;AAMI,oBAAI,CAACD,QAAL,EAAe;AACX,sBAAI;AACAA,oBAAAA,QAAQ,GAAGE,sBAAKC,MAAL,CAAYJ,IAAI,CAAC,MAAD,CAAhB,CAAX;AACA,wBAAI,CAACC,QAAL,EAAeA,QAAQ,GAAG,YAAX;AAClB,mBAHD,CAGE,OAAOI,KAAP,EAAc;AACZJ,oBAAAA,QAAQ,GAAG,YAAX;AACH;AACJ;;AAbL;AAAA,uBAeQ,KAAK9B,WAAL,CAAiBmC,cAAjB,CAAgCN,IAAhC,EAAsC,KAAKtC,GAA3C,EAAgDwC,UAAhD,EAA4DD,QAA5D,CAfR;;AAAA;AAgBI;AACA,oBAAIC,UAAU,KAAKK,SAAnB,EAA8B;AAC5B,uBAAKpC,WAAL,CAAiBqC,UAAjB,CAA4B,KAAK9C,GAAL,GAAW,MAAvC;AACD;;AAEK+C,gBAAAA,CArBV,qCAsBS,KAAK9C,UAtBd,gBAsB8BkC,qBAAKa,YAtBnC,gBAsBqD,KAAKhD,GAtB1D,2BAuBS,KAAKA,GAvBd,kBAuByBmC,qBAAKc,YAvB9B,+BAwBa5B,wBAAQC,MAxBrB,6DAwB8EiB,QAxB9E,+BAyBaJ,qBAAKe,WAzBlB,gBAyBmC,KAAKlD,GAzBxC;AAAA;AAAA,uBA2BU,KAAKS,WAAL,CAAiBwB,YAAjB,CAA8B,KAAKhC,UAAnC,EAA+C8C,CAA/C,CA3BV;;AAAA;AAAA,sBA4BMI,MAAM,CAACC,IAAP,CAAYnC,OAAZ,EAAqBW,MAArB,GAA8B,CA5BpC;AAAA;AAAA;AAAA;;AA6BUR,gBAAAA,EA7BV;;AA8BM,4CAAkB+B,MAAM,CAACC,IAAP,CAAYnC,OAAZ,CAAlB,kCAAwC;AAA7BoC,kBAAAA,GAA6B;AACtCjC,kBAAAA,EAAE,eAAQ,KAAKnB,UAAb,gBAA6BoD,GAA7B,iBAAsCpC,OAAO,CAACoC,GAAD,CAA7C,SAAF;AACD;;AACDjC,gBAAAA,EAAE,IAAI,GAAN;AAjCN;AAAA,uBAkCY,KAAKX,WAAL,CAAiBwB,YAAjB,CAA8B,KAAKhC,UAAnC,EAA+CmB,EAA/C,CAlCZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;6EAsCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACQD,gBAAAA,QADR,GACmB,iCADnB;AAAA;AAAA,uBAEQ,KAAKV,WAAL,CAAiBqC,UAAjB,CAA4B,KAAK9C,GAAjC,CAFR;;AAAA;AAGE;AACMoB,gBAAAA,EAJR,8BAKO,KAAKpB,GALZ,8CAOO,KAAKA,GAPZ;AAAA;AAAA,uBASQmB,QAAQ,CAACI,KAAT,CAAeH,EAAf,EAAmB;AAACI,kBAAAA,OAAO,EAAE,CAAC,KAAKvB,UAAN,CAAV;AAA6BK,kBAAAA,KAAK,EAAE,KAAKA;AAAzC,iBAAnB,CATR;;AAAA;AAWQgD,gBAAAA,EAXR,oCAYa,KAAKtD,GAZlB,8CAca,KAAKA,GAdlB;AAAA;AAAA,uBAgBQmB,QAAQ,CAACI,KAAT,CAAe+B,EAAf,EAAmB;AAAC9B,kBAAAA,OAAO,EAAE,CAAC,KAAKvB,UAAN,CAAV;AAA6BK,kBAAAA,KAAK,EAAE,KAAKA;AAAzC,iBAAnB,CAhBR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"jsonld-remote\"\nimport {v4} from \"uuid\"\nimport { DCAT, DCTERMS, RDFS } from \"@inrupt/vocab-common-rdf\";\nimport mime from \"mime-types\"\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\n\nexport default class LbdDistribution {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public datasetUrl: string;\n  public contentType: string;\n\n  public url: string;\n  public data: any;\n\n  private session:  BrowserSession | NodeSession\n\n  constructor(session: BrowserSession | NodeSession, url: string) {\n    let datasetUrl = url.split('/')\n    datasetUrl.pop()\n    const ds = datasetUrl.join(\"/\") + '/'\n    \n    this.fetch = session.fetch;\n    this.url = url\n    this.datasetUrl = ds\n  \n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.lbdService = new LBDService(session);\n  }\n\n  public async checkExistence() {\n    const status = await this.fetch(this.url, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  public async init(options: object = {}) {\n      this.data = await this.fetch(this.url, options)\n      // this.contentType = await this.getContentType()\n  }\n\n  public async getContentType() {\n    const myEngine = newEngine()\n    const q0 = `SELECT ?ct where {?id <${DCTERMS.format}> ?ct}`\n    const ct = await myEngine.query(q0, {sources: [this.datasetUrl], fetch: this.fetch}).then((res: any) => res.bindings())\n    if (ct.length > 0) {\n      const value = ct[0].get('?ct').value\n      this.contentType = value\n      return value\n    } else {\n      throw new Error(`\"Could not find contentType in dataset ${this.datasetUrl}`)\n    }\n  } \n\n  public async updateMetadata(query) {\n    await this.dataService.sparqlUpdate(this.datasetUrl, query)\n  }\n\n  public async addAccessUrl(accessUrl) {\n    const q0 = `INSERT DATA {<${this.url}> <${DCAT.accessURL}> <${accessUrl}>}`\n    await this.updateMetadata(q0)\n  }\n\n  public async create(\n    file: File | Buffer,\n    options: object = {},\n    mimetype?: string,\n    makePublic?: boolean,\n  ) {\n      if (!mimetype) {\n          try {\n              mimetype = mime.lookup(file[\"name\"])\n              if (!mimetype) mimetype = \"text/plain\"\n          } catch (error) {\n              mimetype = \"text/plain\"\n          }\n      }\n          \n    await this.dataService.writeFileToPod(file, this.url, makePublic, mimetype)\n      //workaround to allow inherited access rights\n      if (makePublic === undefined) {\n        this.dataService.deleteFile(this.url + \".acl\")\n      }\n\n      const q = `INSERT DATA {\n        <${this.datasetUrl}> <${DCAT.distribution}> <${this.url}> .\n        <${this.url}> a <${DCAT.Distribution}> ;\n            <${DCTERMS.format}> <https://www.iana.org/assignments/media-types/${mimetype}> ;\n            <${DCAT.downloadURL}> <${this.url}> .\n      }`\n      await this.dataService.sparqlUpdate(this.datasetUrl, q)\n    if (Object.keys(options).length > 0) {\n        let q0 = `INSERT DATA { `\n        for (const key of Object.keys(options)) {\n          q0 += `<${this.datasetUrl}> <${key}> \"${options[key]}\" .`\n        }    \n        q0 += \"}\"\n        await this.dataService.sparqlUpdate(this.datasetUrl, q0)\n      }\n  }\n\n  public async delete() {\n    const myEngine = newEngine()\n    await this.dataService.deleteFile(this.url)\n    // also update dataset\n    const q0 = `DELETE {\n      <${this.url}> ?p ?o .\n    } WHERE {\n      <${this.url}> ?p ?o .\n    }`\n    await myEngine.query(q0, {sources: [this.datasetUrl], fetch: this.fetch})\n\n    const q1 = `DELETE {\n      ?s ?p <${this.url}> .\n    } WHERE {\n      ?s ?p <${this.url}> .\n    }`\n    await myEngine.query(q1, {sources: [this.datasetUrl], fetch: this.fetch})\n\n    return\n  }\n}\n\n"],"file":"LbdDistribution.js"}