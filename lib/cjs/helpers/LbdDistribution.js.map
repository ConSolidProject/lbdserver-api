{"version":3,"sources":["../../../src/helpers/LbdDistribution.ts"],"names":["LbdDistribution","fetch","url","datasetUrl","split","pop","ds","join","accessService","AccessService","dataService","DataService","lbdService","LBDService","queryEngine","method","then","result","status","options","data","q0","DCTERMS","format","query","sources","res","bindings","ct","length","value","get","contentType","Error","sparqlUpdate","accessUrl","DCAT","accessURL","updateMetadata","file","mimetype","makePublic","mime","lookup","error","writeFileToPod","q","distribution","Distribution","downloadURL","Object","keys","key","deleteFile","q1"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\n\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"jsonld-remote\"\nimport {v4} from \"uuid\"\nimport { DCAT, DCTERMS, RDFS } from \"@inrupt/vocab-common-rdf\";\nimport mime from \"mime-types\"\n\nexport default class LbdDistribution {\n  public fetch;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public datasetUrl: string;\n  public contentType: string;\n\n  // include queryEngine to allow caching of querydata etc.\n  public queryEngine: ActorInitSparql;\n  public url: string;\n  public data: any;\n\n  constructor(fetch: any, url) {\n    let datasetUrl = url.split('/')\n    datasetUrl.pop()\n    const ds = datasetUrl.join(\"/\") + '/'\n    \n    this.fetch = fetch;\n    this.url = url\n    this.datasetUrl = ds\n  \n    this.accessService = new AccessService(fetch);\n    this.dataService = new DataService(fetch);\n    this.lbdService = new LBDService(fetch);\n    this.queryEngine = newEngine();\n  }\n\n  public async checkExistence() {\n    const status = await this.fetch(this.url, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  public async init(options: object = {}) {\n      this.data = await this.fetch(this.url, options)\n      // this.contentType = await this.getContentType()\n  }\n\n  public async getContentType() {\n    const q0 = `SELECT ?ct where {?id <${DCTERMS.format}> ?ct}`\n    const ct = await this.queryEngine.query(q0, {sources: [this.datasetUrl], fetch: this.fetch}).then((res: any) => res.bindings())\n    if (ct.length > 0) {\n      const value = ct[0].get('?ct').value\n      this.contentType = value\n      return value\n    } else {\n      throw new Error(`\"Could not find contentType in dataset ${this.datasetUrl}`)\n    }\n  } \n\n  public async updateMetadata(query) {\n    await this.dataService.sparqlUpdate(this.datasetUrl, query)\n  }\n\n  public async addAccessUrl(accessUrl) {\n    const q0 = `INSERT DATA {<${this.url}> <${DCAT.accessURL}> <${accessUrl}>}`\n    await this.updateMetadata(q0)\n  }\n\n  public async create(\n    file: File | Buffer,\n    options: object = {},\n    mimetype?: string,\n    makePublic: boolean = false,\n  ) {\n      if (!mimetype) {\n          try {\n              mimetype = mime.lookup(file[\"name\"])\n              if (!mimetype) mimetype = \"text/plain\"\n          } catch (error) {\n              mimetype = \"text/plain\"\n          }\n      }\n          \n    await this.dataService.writeFileToPod(file, this.url, makePublic, mimetype)\n\n      const q = `INSERT DATA {\n        <${this.datasetUrl}> <${DCAT.distribution}> <${this.url}> .\n        <${this.url}> a <${DCAT.Distribution}> ;\n            <${DCTERMS.format}> <https://www.iana.org/assignments/media-types/${mimetype}> ;\n            <${DCAT.downloadURL}> <${this.url}> .\n      }`\n      await this.queryEngine.query(q, {sources: [this.datasetUrl], fetch: this.fetch})\n\n    if (Object.keys(options).length > 0) {\n        let q0 = `INSERT DATA { `\n        for (const key of Object.keys(options)) {\n          q0 += `<${this.datasetUrl}> <${key}> \"${options[key]}\" .`\n        }    \n        q0 += \"}\"\n        await this.dataService.sparqlUpdate(this.datasetUrl, q0)\n      }\n  }\n\n  public async delete() {\n    await this.dataService.deleteFile(this.url)\n    // also update dataset\n    const q0 = `DELETE {\n      <${this.url}> ?p ?o .\n    } WHERE {\n      <${this.url}> ?p ?o .\n    }`\n    await this.queryEngine.query(q0, {sources: [this.datasetUrl], fetch: this.fetch})\n\n    const q1 = `DELETE {\n      ?s ?p <${this.url}> .\n    } WHERE {\n      ?s ?p <${this.url}> .\n    }`\n    await this.queryEngine.query(q1, {sources: [this.datasetUrl], fetch: this.fetch})\n\n    return\n  }\n}\n\n"],"file":"LbdDistribution.js"}