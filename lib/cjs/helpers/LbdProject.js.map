{"version":3,"sources":["../../../src/helpers/LbdProject.ts"],"names":["LbdProject","fetch","accessPoint","verbose","endsWith","localProject","projectId","split","length","accessService","AccessService","dataService","DataService","lbdService","LBDService","queryEngine","method","then","result","status","headers","i","json","data","makePublic","existingPartialProjects","local","push","createContainer","createRegistryContainer","LBD","hasDatasetRegistry","hasReferenceRegistry","hasServiceRegistry","part","addPartialProject","init","q0","aggregates","sparqlUpdate","webId","accessRights","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","deleteContainer","query","sources","bindings","map","r","get","value","projects","getProjectRegistry","repo","partialProjectOfStakeholder","res","Error","findPartialProject","partialProjectUrl","containerName","property","containerUrl","options","id","subject","datasetRegistry","datasetUrl","theDataset","LbdDataset","create","ds","datasetId","referenceRegistry","ref","LbdConcept","url","parts","pop","join","console","log"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport LbdConcept from './LbdConcept'\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\nimport LbdDataset from \"./LbdDataset\"\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"jsonld-remote\"\nimport {v4} from \"uuid\"\n\nexport default class LbdProject {\n  public fetch;\n  public verbose: boolean = false;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public projectId: string;\n  public accessPoint: string;\n  public data: object[];\n\n  // include queryEngine to allow caching of querydata etc.\n  public queryEngine: ActorInitSparql;\n  public localProject: string;\n\n  constructor(fetch: any, accessPoint: string, verbose: boolean = false) {\n    if (!accessPoint.endsWith(\"/\")) accessPoint += \"/\"\n\n    this.fetch = fetch;\n    this.accessPoint = accessPoint;\n    this.localProject = accessPoint + \"local/\"\n    this.verbose = verbose;\n    this.projectId = accessPoint.split('/')[accessPoint.split(\"/\").length  - 2];\n    this.accessService = new AccessService(fetch);\n    this.dataService = new DataService(fetch);\n    this.lbdService = new LBDService(fetch);\n    this.queryEngine = newEngine();\n  }\n\n  public async checkExistence() {\n    const status = await this.fetch(this.accessPoint, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  public async init() {\n    const data = await this.fetch(this.localProject, {headers: {\"Accept\": \"application/ld+json\"}}).then(i => i.json())\n    this.data = data\n    return data\n  }\n\n  // initialise a project\n  public async create(\n    makePublic: boolean = false,\n    existingPartialProjects: string[] = []\n  ) {\n    const local = this.accessPoint + 'local/'\n    existingPartialProjects.push(local)\n\n    // create global access point\n    await this.dataService.createContainer(this.accessPoint, makePublic)\n    await this.dataService.createContainer(local, makePublic)\n\n    // create different registries\n    await this.createRegistryContainer(\"datasets/\", makePublic, LBD.hasDatasetRegistry)\n    await this.createRegistryContainer(\"references/\", makePublic, LBD.hasReferenceRegistry)\n    await this.createRegistryContainer(\"services/\", makePublic, LBD.hasServiceRegistry)\n\n    for (const part of existingPartialProjects) {\n        await this.addPartialProject(part)\n    }\n\n    await this.init()\n  }\n\n  public async addPartialProject(part: string) {\n    const q0 = `INSERT DATA {\n        <${this.accessPoint}> <${LBD.aggregates}> <${part}> .\n        }`\n    await this.dataService.sparqlUpdate(this.accessPoint, q0)\n  }\n\n  public async addStakeholder(webId: string, accessRights: AccessRights = {read: true, append: false, write: false, control: false}) {\n    await this.accessService.setResourceAccess(this.accessPoint, accessRights, ResourceType.CONTAINER, webId)\n  }\n\n  public async delete() {\n      await this.dataService.deleteContainer(this.accessPoint, true)\n  }\n\n  public async findAllPartialProjects() {\n    const projects = await this.queryEngine.query(`SELECT ?proj WHERE {<${this.accessPoint}> <${LBD.aggregates}> ?proj}`, {sources: [this.accessPoint], fetch: this.fetch}).then((i: any) => i.bindings()).then(i => i.map(r => r.get('?proj').value))\n    return projects\n  }\n\n  public async findPartialProject(webId: string) {\n    const repo = await this.lbdService.getProjectRegistry(webId)\n    const partialProjectOfStakeholder = repo + this.projectId + '/local/'\n    const status = await this.fetch(partialProjectOfStakeholder, {method: \"HEAD\"}).then(res => res.status)\n    if (status === 200) {\n        return partialProjectOfStakeholder\n    } else {\n        throw new Error(`UNAUTHORIZED: This repository does not exist or you don't have the required access rights`)\n    }\n  }\n\n  public async addPartialProjectByStakeholder(webId: string) {\n    const partialProjectUrl = await this.findPartialProject(webId)\n    await this.addPartialProject(partialProjectUrl)\n    return partialProjectUrl\n  }\n\n  private async createRegistryContainer(containerName, makePublic, property) {\n    if (!containerName.endsWith('/')) containerName += \"/\"\n\n    const containerUrl = this.localProject + containerName\n    await this.dataService.createContainer(containerUrl, makePublic)\n    const q0 = `INSERT DATA {\n        <${this.localProject}> <${property}> <${containerUrl}> .\n      }`;\n    await this.dataService.sparqlUpdate(this.localProject, q0)\n  }\n\n  /////////////////////////////////////////////////////////\n  /////////////////////// DATASETS ////////////////////////\n  /////////////////////////////////////////////////////////\n\n  /**\n   * \n   * @param makePublic \n   * @param id\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\n   * @returns \n   */\n  public async addDataset(\n    options: object = {},\n    makePublic: boolean = false,\n    id: string = v4()\n  ): Promise<LbdDataset> {\n    const subject = extract(this.data, this.localProject)\n    const datasetRegistry = subject[LBD.hasDatasetRegistry][0][\"@id\"]\n    const datasetUrl = datasetRegistry + id + \"/\"\n    const theDataset = new LbdDataset(this.fetch, datasetUrl)\n    await theDataset.create(options, makePublic)\n    return theDataset\n  }\n\n  public async deleteDataset(\n    datasetUrl: string\n  ) {\n    if (!datasetUrl.endsWith('/')) datasetUrl += \"/\"\n    const ds = new LbdDataset(this.fetch, datasetUrl)\n    await ds.delete()\n  }\n\n  public async deleteDatasetById(\n    datasetId: string\n  ) {\n    const subject = extract(this.data, this.localProject)\n    const datasetRegistry = subject[LBD.hasDatasetRegistry][0][\"@id\"]\n    const datasetUrl = datasetRegistry + datasetId + \"/\"\n    const ds = new LbdDataset(this.fetch, datasetUrl)\n    await ds.delete()\n  }\n\n  /////////////////////////////////////////////////////////\n  ////////////////////// REFERENCES////////////////////////\n  /////////////////////////////////////////////////////////\n\n  // get all references related to a specific abstract Concept\n  public async addConcept(): Promise<LbdConcept> {\n    const subject = extract(this.data, this.localProject)\n    const referenceRegistry = subject[LBD.hasReferenceRegistry][0][\"@id\"]\n    const ref = new LbdConcept(this.fetch, referenceRegistry)\n    await ref.create()\n    return ref\n  }\n\n  public async deleteConcept(url: string) {\n    const parts = url.split(\"/\")\n    const id = parts.pop()\n    const referenceRegistry = parts.join(\"/\")\n    console.log('id, referenceRegistry', id, referenceRegistry);\n    const ref = new LbdConcept(this.fetch, referenceRegistry, id)\n    await ref.delete()\n  }\n\n\n  // register an alias for an existing concept\n  public async addAlias() {}\n\n  // get the abstract Concept related to a dataset/distribution + id\n  public async getConcept() {}\n\n  /////////////////////////////////////////////////////////\n  /////////////////////// QUERY ////////////////////////\n  /////////////////////////////////////////////////////////\n  public async queryProject() {\n    // if there is a satellite\n\n    // if there is no satellite\n  }\n\n\n  \n\n}\n\n"],"file":"LbdProject.js"}