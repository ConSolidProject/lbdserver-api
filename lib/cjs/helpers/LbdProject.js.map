{"version":3,"sources":["../../../src/helpers/LbdProject.ts"],"names":["LbdProject","session","accessPoint","verbose","endsWith","fetch","localProject","projectId","split","length","accessService","AccessService","dataService","DataService","lbdService","LBDService","method","then","result","status","headers","i","json","data","existingPartialProjects","options","makePublic","local","push","createContainer","aclDefault","ACL","Authorization","agentClass","FOAF","Agent","sparqlUpdate","createRegistryContainer","LBD","hasDatasetRegistry","hasReferenceRegistry","referenceContainerUrl","hasServiceRegistry","part","addPartialProject","q","DCTERMS","creator","info","webId","Object","keys","q0","key","referenceMeta","LbdDataset","create","addDistribution","Buffer","from","init","aggregates","accessRights","read","append","write","control","setResourceAccess","ResourceType","CONTAINER","deleteContainer","myEngine","query","sources","bindings","map","r","get","value","projects","getProjectRegistry","repo","partialProjectOfStakeholder","res","Error","findPartialProject","partialProjectUrl","containerName","property","containerUrl","id","subject","datasetRegistry","datasetUrl","theDataset","ds","datasetId","results","resultToString","asJson","partials","item","source","getAllPartialProjects","p","getSingleQueryResult","dsReg","LDP","contains","asStream","parsed","referenceRegistry","ref","LbdConcept","url","parts","pop","join"],"mappings":"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","sourcesContent":["import AccessService from \"./access-service\";\nimport DataService from \"./data-service\";\nimport LbdConcept from './LbdConcept'\nimport { newEngine, IQueryResultBindings, ActorInitSparql } from \"@comunica/actor-init-sparql\";\nimport LbdDataset from \"./LbdDataset\"\nimport LBD from \"./vocab/lbd\";\nimport { AccessRights, ResourceType } from \"./BaseDefinitions\";\nimport LBDService from \"./LbdService\";\nimport {extract} from \"./functions\"\nimport {v4} from \"uuid\"\nimport { ACL, DCTERMS, FOAF } from \"@inrupt/vocab-common-rdf\";\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\nimport { Session as NodeSession} from \"@inrupt/solid-client-authn-node\";\nimport { LDP } from \"@inrupt/vocab-common-rdf\";\nimport { parseStream } from \"./utils\";\n\nexport default class LbdProject {\n  public fetch;\n  public verbose: boolean = false;\n  public accessService: AccessService;\n  public dataService: DataService;\n  public lbdService: LBDService;\n  public projectId: string;\n  public accessPoint: string;\n  public data: object[];\n  \n  private session: BrowserSession | NodeSession;\n\n  // include queryEngine to allow caching of querydata etc.\n  public localProject: string;\n\n  constructor(session: BrowserSession | NodeSession, accessPoint: string, verbose: boolean = false) {\n    if (!accessPoint.endsWith(\"/\")) accessPoint += \"/\"\n    this.session = session\n    this.fetch = session.fetch;\n    this.accessPoint = accessPoint;\n    this.localProject = accessPoint + \"local/\"\n    this.verbose = verbose;\n    this.projectId = accessPoint.split('/')[accessPoint.split(\"/\").length  - 2];\n    this.accessService = new AccessService(session.fetch);\n    this.dataService = new DataService(session.fetch);\n    this.lbdService = new LBDService(session);\n  }\n\n  public async checkExistence() {\n    const status = await this.fetch(this.accessPoint, {method: \"HEAD\"}).then(result => result.status)\n    if (status === 200) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  public async init() {\n    const data = await this.fetch(this.localProject, {headers: {\"Accept\": \"application/ld+json\"}}).then(i => i.json())\n    this.data = data\n    return data\n  }\n\n  // initialise a project\n  public async create(\n    existingPartialProjects: string[] = [],\n    options: object = {},\n    makePublic: boolean = false,\n  ) {\n    const local = this.accessPoint + 'local/'\n    existingPartialProjects.push(local)\n\n    // create global access point\n    await this.dataService.createContainer(this.accessPoint, makePublic)\n    await this.dataService.createContainer(local, makePublic)\n    if (makePublic) {\n      let aclDefault = `INSERT {?rule <${ACL.default}> <${local}>} WHERE {?rule a <${ACL.Authorization}> ; <${ACL.agentClass}> <${FOAF.Agent}>}`\n      await this.dataService.sparqlUpdate(local + '.acl', aclDefault)\n    }\n\n    // create different registries\n    await this.createRegistryContainer(\"datasets/\", makePublic, LBD.hasDatasetRegistry)\n    const referenceContainerUrl = await this.createRegistryContainer(\"references/\", makePublic, LBD.hasReferenceRegistry)\n    await this.createRegistryContainer(\"services/\", makePublic, LBD.hasServiceRegistry)\n\n    for (const part of existingPartialProjects) {\n        await this.addPartialProject(part)\n    }\n\n    let q = `INSERT DATA {<${this.accessPoint}> <${DCTERMS.creator}> \"${this.session.info.webId}\" . }`\n    await this.dataService.sparqlUpdate(local, q)\n    await this.dataService.sparqlUpdate(this.accessPoint, q)\n\n    // create optional metadata (e.g. label etc.)\n    if (Object.keys(options).length > 0) {\n      let q0 = `INSERT DATA { `\n      for (const key of Object.keys(options)) {\n        q0 += `<${this.accessPoint}> <${key}> \"${options[key]}\" .`\n      }    \n      q0 += \"}\"\n      await this.dataService.sparqlUpdate(this.accessPoint, q0)\n    }\n\n\n\n    const referenceMeta = new LbdDataset(this.session, referenceContainerUrl)\n    await referenceMeta.create()\n    await referenceMeta.addDistribution(Buffer.from(\"\"), \"text/turtle\", {}, \"data\", makePublic)\n    await this.init()\n  }\n\n  public async addPartialProject(part: string) {\n    const q0 = `INSERT DATA {\n        <${this.accessPoint}> <${LBD.aggregates}> <${part}> .\n        }`\n    await this.dataService.sparqlUpdate(this.accessPoint, q0)\n  }\n\n  public async addStakeholder(webId: string, accessRights: AccessRights = {read: true, append: false, write: false, control: false}) {\n    await this.accessService.setResourceAccess(this.accessPoint, accessRights, ResourceType.CONTAINER, webId)\n  }\n\n  public async delete() {\n      await this.dataService.deleteContainer(this.accessPoint, true)\n  }\n\n  public async findAllPartialProjects() {\n    const myEngine = newEngine()\n    const projects = await myEngine.query(`SELECT ?proj WHERE {<${this.accessPoint}> <${LBD.aggregates}> ?proj}`, {sources: [this.accessPoint], fetch: this.fetch}).then((i: any) => i.bindings()).then(i => i.map(r => r.get('?proj').value))\n    return projects\n  }\n\n  public async findPartialProject(webId: string) {\n    const repo = await this.lbdService.getProjectRegistry(webId)\n    const partialProjectOfStakeholder = repo + this.projectId + '/local/'\n    const status = await this.fetch(partialProjectOfStakeholder, {method: \"HEAD\"}).then(res => res.status)\n    if (status === 200) {\n        return partialProjectOfStakeholder\n    } else {\n        throw new Error(`UNAUTHORIZED: This repository does not exist or you don't have the required access rights`)\n    }\n  }\n\n  public async addPartialProjectByStakeholder(webId: string) {\n    const partialProjectUrl = await this.findPartialProject(webId)\n    await this.addPartialProject(partialProjectUrl)\n    return partialProjectUrl\n  }\n\n  private async createRegistryContainer(containerName, makePublic, property) {\n    if (!containerName.endsWith('/')) containerName += \"/\"\n\n    const containerUrl = this.localProject + containerName\n    await this.dataService.createContainer(containerUrl, makePublic)\n    const q0 = `INSERT DATA {\n        <${this.localProject}> <${property}> <${containerUrl}> .\n      }`;\n    await this.dataService.sparqlUpdate(this.localProject, q0)\n    return containerUrl\n  }\n\n  /////////////////////////////////////////////////////////\n  /////////////////////// DATASETS ////////////////////////\n  /////////////////////////////////////////////////////////\n\n  /**\n   * \n   * @param makePublic \n   * @param id\n   * @param options Optional - Object containing metadata about the dataset to be created. e.g: {[RDFS.label]: \"theLabel\"}\n   * @returns \n   */\n  public async addDataset(\n    options: object = {},\n    makePublic: boolean = false,\n    id: string = v4()\n  ): Promise<LbdDataset> {\n    const subject = extract(this.data, this.localProject)\n    const datasetRegistry = subject[LBD.hasDatasetRegistry][0][\"@id\"]\n    const datasetUrl = datasetRegistry + id + \"/\"\n    const theDataset = new LbdDataset(this.session, datasetUrl)\n    await theDataset.create(options, makePublic)\n    return theDataset\n  }\n\n  public async deleteDataset(\n    datasetUrl: string\n  ) {\n    if (!datasetUrl.endsWith('/')) datasetUrl += \"/\"\n    const ds = new LbdDataset(this.session, datasetUrl)\n    await ds.delete()\n  }\n\n  public async deleteDatasetById(\n    datasetId: string\n  ) {\n    const subject = extract(this.data, this.localProject)\n    const datasetRegistry = subject[LBD.hasDatasetRegistry][0][\"@id\"]\n    const datasetUrl = datasetRegistry + datasetId + \"/\"\n    const ds = new LbdDataset(this.session, datasetUrl)\n    await ds.delete()\n  }\n\n  private async getAllPartialProjects() {\n    const myEngine = newEngine()\n    const q = `SELECT ?partial WHERE {<${this.accessPoint}> <${LBD.aggregates}> ?partial}`\n    const results = await myEngine.query(q, {sources: [this.accessPoint], fetch: this.fetch})\n    const { data } = await myEngine.resultToString(results,'application/sparql-results+json');\n    const asJson = await parseStream(data)\n    const partials = asJson[\"results\"].bindings.map(item => item[\"partial\"].value)\n    return partials\n  }\n\n  private async getSingleQueryResult(source, property) {\n    const myEngine = newEngine()\n    const q = `SELECT ?res WHERE {<${source}> <${property}> ?res}`\n    const bindings = await myEngine.query(q, {sources: [source], fetch: this.fetch}).then((i: IQueryResultBindings) => i.bindings())\n    return bindings[0].get(\"?res\").value\n  }\n\n  public async getAllDatasetUrls(options?: {query: string, asStream: boolean, local: boolean}) {\n    const myEngine = newEngine()\n    const subject = extract(this.data, this.localProject)\n    const sources = []\n    if (options && options.local) {\n      sources.push(subject[LBD.hasDatasetRegistry][0][\"@id\"])\n    } else {\n      const partials = await this.getAllPartialProjects()\n      for (const p of partials) {\n        const dsReg = await this.getSingleQueryResult(p, LBD.hasDatasetRegistry)\n        sources.push(dsReg)\n      }\n    }\n    let q\n    if (!options || !options.query) {\n      q = `SELECT ?dataset WHERE {?registry <${LDP.contains}> ?dataset}`\n    } else {\n      q = options.query\n    }\n\n    const results = await myEngine.query(q, {sources, fetch: this.fetch})\n    const { data } = await myEngine.resultToString(results,'application/sparql-results+json');\n    if (options && options.asStream) {\n      return data\n    } else {\n      const parsed = await parseStream(data);\n      return parsed[\"results\"].bindings.map(i => i[\"dataset\"].value)\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  ////////////////////// REFERENCES////////////////////////\n  /////////////////////////////////////////////////////////\n\n  // get all references related to a specific abstract Concept\n  public async addConcept(): Promise<LbdConcept> {\n    const subject = extract(this.data, this.localProject)\n    const referenceRegistry = subject[LBD.hasReferenceRegistry][0][\"@id\"]\n    const ref = new LbdConcept(this.session, referenceRegistry)\n    await ref.create()\n    return ref\n  }\n\n  public async deleteConcept(url: string) {\n    const parts = url.split(\"/\")\n    const id = parts.pop()\n    const referenceRegistry = parts.join(\"/\")\n    const ref = new LbdConcept(this.session, referenceRegistry, id)\n    await ref.delete()\n  }\n\n\n  // register an alias for an existing concept\n  public async addAlias() {}\n\n  // get the abstract Concept related to a dataset/distribution + id\n  public async getConcept() {}\n\n  /////////////////////////////////////////////////////////\n  /////////////////////// QUERY ////////////////////////\n  /////////////////////////////////////////////////////////\n  public async queryProject() {\n    // if there is a satellite\n\n    // if there is no satellite\n  }\n\n\n  \n\n}\n\n"],"file":"LbdProject.js"}